[
    {
        "intent": "[CLS] send a signal str_0 to the current process [SEP]",
        "reference": "os . kill ( os . getpid ( ) , signal . SIGUSR1 )",
        "Output": "os . system ( ` signal . SIGUSR1 ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "signal.SIGUSR1",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] deco ##de a he ##x string str_0 to ut ##f - 8 . [SEP]",
        "reference": "bytes . fromhex ( ` 4a4b4c ` ) . decode ( ` utf - 8 ` )",
        "Output": "urllib . parse . unquote ( ` 4a4b4c ` ) . decode ( ` utf8 ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "4a4b4c",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] check if all elements in list var_0 are identical [SEP]",
        "reference": "all ( x = = my List [ 0 ] for x in my List )",
        "Output": "len ( set ( my List ) ) = = len ( my List )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "myList",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] format number of spaces between strings var_0 , str_0 and str_1 to be str_2 [SEP]",
        "reference": "print ( ` % * s : % * s ` % ( 20 , ` Python ` , 20 , ` Very Good ` ) )",
        "Output": "` ` ` Python ` ` ` . format ( 7 , ` Python ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "Python",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": ":",
                    "quote": "`",
                    "type": "str"
                },
                "str_1": {
                    "value": "Very Good",
                    "quote": "`",
                    "type": "str"
                },
                "str_2": {
                    "value": "20",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] format number of spaces between strings var_0 , str_0 and str_1 to be str_2 [SEP]",
        "reference": "d . decode ( ` cp1251 ` ) . encode ( ` utf8 ` )",
        "Output": "` ` ` Python ` ` ` . format ( 7 , ` Python ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "Python",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": ":",
                    "quote": "`",
                    "type": "str"
                },
                "str_1": {
                    "value": "Very Good",
                    "quote": "`",
                    "type": "str"
                },
                "str_2": {
                    "value": "20",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get rid of none values in dictionary var_0 [SEP]",
        "reference": "res = { k : v for k , v in list ( kwargs . items ( ) ) if v is not None }",
        "Output": "kwargs = list ( kwargs . values ( ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "kwargs",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get rid of none values in dictionary var_0 [SEP]",
        "reference": "res = dict ( ( k , v ) for k , v in kwargs . items ( ) if v is not None )",
        "Output": "kwargs = list ( kwargs . values ( ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "kwargs",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] capture final output of a chain of system commands str_0 [SEP]",
        "reference": "subprocess . check_output ( ` ps - ef | grep something | wc - l ` , shell = True )",
        "Output": "os . popen ( ` ps - ef | grep something | wc - l ` ) . read ( )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "ps -ef | grep something | wc -l",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] con ##cate ##nate a list of strings str_0 [SEP]",
        "reference": "` ` ` ` ` ` . join ( [ ` a ` , ` b ` , ` c ` ] )",
        "Output": "` ` ` ` ` ` . join ( [ ` a ` , ` b ` , ` c ` ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "['a', 'b', 'c']",
                    "quote": "`",
                    "type": "str"
                },
                "[str_0]": {
                    "value": "['a', 'b', 'c']",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find intersection data between series var_0 and series var_1 [SEP]",
        "reference": "pd . Series ( list ( set ( s1 ) . intersection ( set ( s2 ) ) ) )",
        "Output": "pd . concat ( [ s1 , s2 ] , axis = 1 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "s1",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "s2",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sending http header ##s to var_0 [SEP]",
        "reference": "client . send ( ` HTTP / 1 . 0 200 OK \\ r \\ n ` )",
        "Output": "client = urllib . request . urlopen ( url , headers = headers )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "client",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] format a date ##time string var_0 to extract date only [SEP]",
        "reference": "then = datetime . datetime . strptime ( when , ` % Y - % m - % d ` ) . date ( )",
        "Output": "datetime . datetime . strptime ( when , ` % Y - % m - % d ` ) . date ( )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "when",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split a multi - line string var_0 into separate strings [SEP]",
        "reference": "input String . split ( ` \\ n ` )",
        "Output": "[ line for line in input String for item in t . split ( ` , ` ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "inputString",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split a multi - line string str_0 by new line character str_1 [SEP]",
        "reference": "` a \\ n b \\ r \\ n c ` . split ( ` \\ n ` )",
        "Output": "re . split ( ` pivot_table ` , ` \\ n ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "a \n b \r\n c",
                    "quote": "`",
                    "type": "str"
                },
                "str_1": {
                    "value": "\n",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] con ##cate ##nate elements of list var_0 by a colon str_0 [SEP]",
        "reference": "` ` ` : ` ` ` . join ( str ( x ) for x in b )",
        "Output": "b = [ ` ` . join ( x ) for x in b ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "b",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": ":",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the first object from a query ##set in dj ##ango model var_0 [SEP]",
        "reference": "Entry . objects . filter ( ) [ : 1 ] . get ( )",
        "Output": "Entry = Entry . objects . map ( lambda x : x . objects . all ( ) [ 0 ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "Entry",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] calculate sum over all rows of 2d nu ##mp ##y array [SEP]",
        "reference": "a . sum ( axis = 1 )",
        "Output": "np . sum ( ( x . sum ( ) for x in np . random . randint ( 2 ) ) , axis = 0 )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] enable warnings using action str_0 [SEP]",
        "reference": "warnings . simplefilter ( ` always ` )",
        "Output": "warnings . ignore ( ` always ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "always",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] con ##cate ##nate items of list var_0 with a space str_0 [SEP]",
        "reference": "print ( ` ` . join ( map ( str , l ) ) )",
        "Output": "` ` ` ` ` ` . join ( l )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] run script str_0 with argument str_1 on terminal using python ex ##ec ##utable [SEP]",
        "reference": "subprocess . call ( [ ` python . exe ` , ` hello . py ` , ` htmlfilename . htm ` ] )",
        "Output": "subprocess . call ( [ ` hello . py ` , ` htmlfilename . htm ` , ` system ` ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "hello.py",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "htmlfilename.htm",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] run script str_0 with argument str_1 on terminal using python ex ##ec ##utable [SEP]",
        "reference": "time . strptime ( ` 30 / 03 / 09 16 : 31 : 32 . 123 ` , ` % d / % m / % y % H : % M : % S . % f ` )",
        "Output": "subprocess . call ( [ ` hello . py ` , ` htmlfilename . htm ` , ` system ` ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "hello.py",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "htmlfilename.htm",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert a string var_0 with dot and com ##ma into a float number var_1 [SEP]",
        "reference": "my_float = float ( my_string . replace ( ` , ` , ` ` ) )",
        "Output": "my_float = float ( my_string . split ( ` , ` ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "my_string",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "my_float",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert a string str_0 with dot and com ##ma into a floating number [SEP]",
        "reference": "float ( ` 123 , 456 . 908 ` . replace ( ` , ` , ` ` ) )",
        "Output": "print ( float ( ` 123 , 456 . 908 ` ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "123,456.908",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] set python ##path in python script . [SEP]",
        "reference": "sys . path . append ( ` / path / to / whatever ` )",
        "Output": "path = os . path . abspath ( os . path . dirname ( __file__ ) )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] split string str_0 using a reg ##ex str_1 [SEP]",
        "reference": "re . split ( ` ( \\ \\ W + ) ` , ` Words , words , words . ` )",
        "Output": "re . split ( ` ( \\ \\ W + ) ` , ` Words , words , words . ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "Words, words, words.",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "(\\W+)",
                    "quote": "'",
                    "type": "str"
                },
                "(str_1)": {
                    "value": "(\\W+)",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] open a file str_0 in app ##end mode [SEP]",
        "reference": "file = open ( ` Output . txt ` , ` a ` )",
        "Output": "f = open ( ` Output . txt ` , ` wb ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "Output.txt",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] download a file str_0 over http and save to str_1 [SEP]",
        "reference": "urllib . request . urlretrieve ( ` http : / / www . example . com / songs / mp3 . mp3 ` , ` mp3 . mp3 ` )",
        "Output": "f . write ( f . read ( ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "http://www.example.com/songs/mp3.mp3",
                    "quote": "\"",
                    "type": "str"
                },
                "str_1": {
                    "value": "mp3.mp3",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] download a file var_0 over http and save to var_1 [SEP]",
        "reference": "u = urllib . request . urlopen ( url )",
        "Output": "file_name = urllib . request . urlopen ( url , file_name )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "url",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "file_name",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] download a file str_0 over http [SEP]",
        "reference": "response = urllib . request . urlopen ( ` http : / / www . example . com / ` )",
        "Output": "f = open ( ` http : / / www . example . com / ` , ` wb ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "http://www.example.com/",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] download a file var_0 over http [SEP]",
        "reference": "r = requests . get ( url )",
        "Output": "file_name = urllib . request . urlopen ( url )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "url",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] download a file var_0 over http and save to str_0 [SEP]",
        "reference": "response = requests . get ( url , stream = True )",
        "Output": "f . close ( )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "url",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "10MB",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] ar ##gp ##ars ##e add argument with flag str_0 and version action of str_1 to par ##ser var_0 [SEP]",
        "reference": "parser . add_argument ( ` - - version ` , action = ` version ` , version = ` % ( prog ) s 2 . 0 ` )",
        "Output": "parser . add_argument ( ` - - version ` , nargs = ` % ( prog ) s 2 . 0 ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "--version",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "%(prog)s 2.0",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "parser",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] remove key str_0 from dictionary var_0 [SEP]",
        "reference": "{ i : d [ i ] for i in d if i ! = ` c ` }",
        "Output": "d = dict ( ( k [ 0 ] , v . c ) for k , v in list ( d . items ( ) ) if k ! = ` c ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "c",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "d",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create new data ##frame object by merging columns str_0 of data ##frame ##s var_0 and var_1 and ren ##ame the columns from data ##frame ##s var_0 and var_1 with suffix var_4 and var _ 5 respectively [SEP]",
        "reference": "pd . merge ( split_df , csv_df , on = [ ` key ` ] , suffixes = ( ` _left ` , ` _right ` ) )",
        "Output": "pd . concat ( [ split_df , csv_df ] , axis = 1 )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "key",
                    "quote": "\"",
                    "type": "str"
                },
                "var_0": {
                    "value": "split_df",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "csv_df",
                    "quote": "`",
                    "type": "var"
                },
                "var_2": {
                    "value": "split_df",
                    "quote": "`",
                    "type": "var"
                },
                "var_3": {
                    "value": "csv_df",
                    "quote": "`",
                    "type": "var"
                },
                "var_4": {
                    "value": "_left",
                    "quote": "`",
                    "type": "var"
                },
                "var_5": {
                    "value": "_right",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split a string var_0 by space with str_0 splits [SEP]",
        "reference": "s . split ( ` ` , 4 )",
        "Output": "[ x . split ( ` ` ) for x in s . split ( ` 4 ` ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "4",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] read keyboard - input [SEP]",
        "reference": "input ( ` Enter your input : ` )",
        "Output": "input = input ( ) . split ( ` ` )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] enable de ##bu ##g mode on fl ##ask application var_0 [SEP]",
        "reference": "app . run ( debug = True )",
        "Output": "app = os . path . dirname ( os . path . abspath ( __file__ ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "app",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] python save list var_0 to file object str_0 [SEP]",
        "reference": "pickle . dump ( mylist , open ( ` save . txt ` , ` wb ` ) )",
        "Output": "mylist . close ( )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "mylist",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "save.txt",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] multi ##ply a matrix var_0 with a 3d tensor var_1 in sci ##py [SEP]",
        "reference": "scipy . tensordot ( P , T , axes = [ 1 , 1 ] ) . swapaxes ( 0 , 1 )",
        "Output": "numpy . dot ( P , T )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "P",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "T",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create 3d array of zero ##es of size str_0 [SEP]",
        "reference": "numpy . zeros ( ( 3 , 3 , 3 ) )",
        "Output": "[ [ 0 , 0 , 0 , 0 ] for i in range ( 3 , 3 , 3 ) ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "(3,3,3)",
                    "quote": "`",
                    "type": "str"
                },
                "(str_0)": {
                    "value": "(3,3,3)",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] cut off the last word of a sentence var_0 [SEP]",
        "reference": "` ` ` ` ` ` . join ( content . split ( ` ` ) [ : - 1 ] )",
        "Output": "content = content . replace ( ` ` , ` ` ) . replace ( ` ` , ` ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "content",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert scala ##r var_0 to array [SEP]",
        "reference": "x = np . asarray ( x ) . reshape ( 1 , - 1 ) [ ( 0 ) , : ]",
        "Output": "x = np . array ( x )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "x",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sum all elements of nest ##ed list var_0 [SEP]",
        "reference": "sum ( sum ( i ) if isinstance ( i , list ) else i for i in L )",
        "Output": "sum ( sum ( l ) for l in L )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "L",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert he ##x string str_0 to a float number [SEP]",
        "reference": "struct . unpack ( ` ! f ` , ` 470FC614 ` . decode ( ` hex ` ) ) [ 0 ]",
        "Output": "float ( ast . literal_eval ( ` 470FC614 ` ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "470FC614",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] multiple each value by str_0 for all keys in a dictionary var_0 [SEP]",
        "reference": "my_dict . update ( ( x , y * 2 ) for x , y in list ( my_dict . items ( ) ) )",
        "Output": "[ ( k , v ) for k , v in list ( my_dict . items ( ) ) if k = = ` 2 ` ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "2",
                    "quote": "`",
                    "type": "str"
                },
                "var_0": {
                    "value": "my_dict",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] running bash script str_0 [SEP]",
        "reference": "subprocess . call ( ` sleep . sh ` , shell = True )",
        "Output": "subprocess . call ( ` / bin / bash - c ` echo hello world ` ` , shell = ` True ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "sleep.sh",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] join elements of list var_0 with a com ##ma str_0 [SEP]",
        "reference": "` ` ` , ` ` ` . join ( l )",
        "Output": "l = [ ` , ` . join ( l ) for l in l ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": ",",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] make a com ##ma - separated string from a list var_0 [SEP]",
        "reference": "my List = ` , ` . join ( map ( str , my List ) )",
        "Output": "my List = [ ` , ` . join ( x ) for x in my List ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "myList",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] reverse the list that contains 1 to 10 [SEP]",
        "reference": "list ( reversed ( list ( range ( 10 ) ) ) )",
        "Output": "[ x for x in list ( range ( 10 ) ) if x = = 10 ]",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] remove sub ##st ##ring str_0 from a string str_1 [SEP]",
        "reference": "print ( ` lamp , bag , mirror ` . replace ( ` bag , ` , ` ` ) )",
        "Output": "re . sub ( ` bag , ` , ` ` , lamp , bag , mirror )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "bag,",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "lamp, bag, mirror",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] reverse the order of words , del ##imi ##ted by str_0 , in string var_0 [SEP]",
        "reference": "` ` ` . ` ` ` . join ( s . split ( ` . ` ) [ : : - 1 ] )",
        "Output": "s . split ( key = lambda x : x [ : : - 1 ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": ".",
                    "quote": "`",
                    "type": "str"
                },
                "var_0": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert epoch time represented as mill ##ise ##con ##ds var_0 to string using format str_0 [SEP]",
        "reference": "datetime . datetime . fromtimestamp ( s ) . strftime ( ` % Y - % m - % d % H : % M : % S . % f ` )",
        "Output": "datetime . datetime ( 1970 , 1 , 1 ) . strftime ( ` % Y - % m - % d % H : % M : % S . % f ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "%Y-%m-%d %H:%M:%S.%f",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] par ##se mill ##ise ##con ##ds epoch time str_0 to format str_1 [SEP]",
        "reference": "time . strftime ( ` % Y - % m - % d % H : % M : % S ` , time . gmtime ( 1236472051807 / 1000 ) )",
        "Output": "datetime . datetime . fromtimestamp ( timestamp + ` % Y - % m - % d % H : % M : % S ` ) . strftime ( ` % Y - % m - % d % H : % M : % S ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "1236472051807",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "%Y-%m-%d %H:%M:%S",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the date 7 days before the current date [SEP]",
        "reference": "( datetime . datetime . now ( ) - datetime . timedelta ( days = 7 ) ) . date ( )",
        "Output": "datetime . datetime . now ( ) + relativedelta . relativedelta ( days = 7 )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] sum elements at index var_0 of each list in list var_1 [SEP]",
        "reference": "print ( sum ( row [ column ] for row in data ) )",
        "Output": "[ sum ( column ) for v in zip ( * data ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "column",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "data",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sum columns of a list var_0 [SEP]",
        "reference": "[ sum ( row [ i ] for row in array ) for i in range ( len ( array [ 0 ] ) ) ]",
        "Output": "sum ( sum ( array [ ( i ) , : ] ) for i in array )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "array",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] en ##code binary string str_0 to base ##64 code [SEP]",
        "reference": "base64 . b64encode ( bytes ( ` your string ` , ` utf - 8 ` ) )",
        "Output": "` ` ` your string ` ` ` . encode ( ` hex ` ) . decode ( ` base64 ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "your string",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] combine list of di ##ction ##aries var_0 with the same keys in each list to a single dictionary [SEP]",
        "reference": "dict ( ( k , [ d [ k ] for d in dicts ] ) for k in dicts [ 0 ] )",
        "Output": "dict ( ( k , v ) for d in dicts for k , v in list ( d . items ( ) ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "dicts",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] merge a nest ##ed dictionary var_0 into a flat dictionary by con ##cate ##nat ##ing nest ##ed values with the same key var_1 [SEP]",
        "reference": "{ k : [ d [ k ] for d in dicts ] for k in dicts [ 0 ] }",
        "Output": "dict ( ( v , k ) for k , v in list ( dicts . items ( ) ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "dicts",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "k",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] merge a nest ##ed dictionary var_0 into a flat dictionary by con ##cate ##nat ##ing nest ##ed values with the same key var_1 [SEP]",
        "reference": "request . args [ ` my Param ` ]",
        "Output": "dict ( ( v , k ) for k , v in list ( dicts . items ( ) ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "dicts",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "k",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] identify duplicate values in list var_0 [SEP]",
        "reference": "[ k for k , v in list ( Counter ( mylist ) . items ( ) ) if v > 1 ]",
        "Output": "[ list ( g ) for k , g in groupby ( mylist ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "mylist",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] insert directory str_0 into directory var_0 [SEP]",
        "reference": "sys . path . insert ( 1 , os . path . join ( os . path . dirname ( __file__ ) , ` apps ` ) )",
        "Output": "__file__ = os . path . dirname ( __file__ )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "apps",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "__file__",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] modify sy ##s . path for python module var_0 [SEP]",
        "reference": "sys . path . append ( os . path . join ( os . path . dirname ( __file__ ) , ` subdir ` ) )",
        "Output": "sys . path . insert ( 0 , subdir , self . path )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "subdir",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] insert a str_0 value into a sql ##ite ##3 table . [SEP]",
        "reference": "db . execute ( ` INSERT INTO present VALUES ( ` test2 ` , ? , 10 ) ` , ( None , ) )",
        "Output": "con . commit ( )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "None",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] flat ##ten list var_0 [SEP]",
        "reference": "[ image for menuitem in list_of_menuitems for image in menuitem ]",
        "Output": "list_of_menuitems = [ i [ 0 ] for i in list_of_menuitems ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "list_of_menuitems",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] app ##end elements of a set var_0 to a list var_1 [SEP]",
        "reference": "a . extend ( b )",
        "Output": "a = [ list ( x ) for x in set ( tuple ( x ) for x in b ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "b",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] app ##end elements of a set var_0 to a list var_1 [SEP]",
        "reference": "a . extend ( list ( b ) )",
        "Output": "a = [ list ( x ) for x in set ( tuple ( x ) for x in b ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "b",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] write the data of data ##frame var_0 into text file str_0 [SEP]",
        "reference": "np . savetxt ( ` c : \\ \\ data \\ \\ np . txt ` , df . values , fmt = ` % d ` )",
        "Output": "df . to_csv ( ` np . txt ` , sep = ` \\ t ` , header = None )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "np.txt",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] write content of data ##frame var_0 into text file str_0 [SEP]",
        "reference": "df . to_csv ( ` c : \\ \\ data \\ \\ pandas . txt ` , header = None , index = None , sep = ` ` , mode = ` a ` )",
        "Output": "df . to_csv ( ` c : \\ \\ data \\ \\ pandas . txt ` , sep = ` \\ t ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "c:\\data\\pandas.txt",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split a string var_0 by last occurrence of character str_0 [SEP]",
        "reference": "print ( x . rpartition ( ` - ` ) [ 0 ] )",
        "Output": "x . rsplit ( ` - ` , 1 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "x",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "-",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the last part of a string before the character str_0 [SEP]",
        "reference": "print ( x . rsplit ( ` - ` , 1 ) [ 0 ] )",
        "Output": "s . rsplit ( ` . ` , 3 ) [ 2 ] . split ( ` : ` ) [ - 1 ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "-",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] up ##load file using ft ##p [SEP]",
        "reference": "ftp . storlines ( ` STOR ` + filename , open ( filename , ` r ` ) )",
        "Output": "ftp . quit ( )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] add one to the hidden web element with id str_0 with se ##len ##ium python script [SEP]",
        "reference": "browser . execute_script ( ` document . get Element By Id ( ` XYZ ` ) . value + = ` 1 ` ` )",
        "Output": "driver . get ( ` XYZ ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "XYZ",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create array containing the maximum value of respective elements of array str_0 and array str_1 [SEP]",
        "reference": "np . maximum ( [ 2 , 3 , 4 ] , [ 1 , 5 , 2 ] )",
        "Output": "np . array ( [ [ 2 , 3 , 4 ] , [ 1 , 5 , 2 ] ] , axis = 1 ) [ : , ( [ 1 , 2 ] ) ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "[2, 3, 4]",
                    "quote": "`",
                    "type": "str"
                },
                "str_1": {
                    "value": "[1, 5, 2]",
                    "quote": "`",
                    "type": "str"
                },
                "[str_0]": {
                    "value": "[2, 3, 4]",
                    "quote": "`",
                    "type": "str"
                },
                "[str_1]": {
                    "value": "[1, 5, 2]",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] print a list var_0 and move first 3 elements to the end of the list [SEP]",
        "reference": "print ( l [ 3 : ] + l [ : 3 ] )",
        "Output": "print ( l [ 0 : 3 ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] loop over files in directory str_0 [SEP]",
        "reference": "for fn in os . listdir ( ` . ` ) : if os . path . isfile ( fn ) : pass",
        "Output": "for filename in os . listdir ( . ) : pass",
        "Var_Maps": [
            {
                "str_0": {
                    "value": ".",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] loop over files in directory var_0 [SEP]",
        "reference": "for root , dirs , filenames in os . walk ( source ) : for f in filenames : pass",
        "Output": "print ( os . path . join ( source , source ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "source",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create a random list of integers [SEP]",
        "reference": "[ int ( 1000 * random . random ( ) ) for i in range ( 10000 ) ]",
        "Output": "l = [ random . randint ( 1 , 9 ) for _ in range ( 3 ) ]",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] create a random list of integers [SEP]",
        "reference": "datetime . datetime . now ( ) . strftime ( ` % H : % M : % S . % f ` )",
        "Output": "l = [ random . randint ( 1 , 9 ) for _ in range ( 3 ) ]",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] google app engine execute g ##q ##l query str_0 with parameter str_1 [SEP]",
        "reference": "db . Gql Query ( ` SELECT * FROM Schedule WHERE station = $ 1 ` , foo . key ( ) )",
        "Output": "self . execute ( ` SELECT * FROM Schedule WHERE station = $ 1 ` , [ foo . key ( ) ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "SELECT * FROM Schedule WHERE station = $1",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "foo.key()",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] filter rows in panda ##s starting with alphabet str_0 using regular expression . [SEP]",
        "reference": "df . b . str . contains ( ` ^ f ` )",
        "Output": "df [ df . filter ( regex = ` f ` ) . str . contains ( ` f ` ) ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "f",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] print a 2 dimensional list var_0 as a table with del ##imi ##ters [SEP]",
        "reference": "print ( ` \\ n ` . join ( ` \\ t ` . join ( str ( col ) for col in row ) for row in tab ) )",
        "Output": "print ( ` \\ n ` . join ( [ ` , ` . join ( x ) for x in tab ] ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "tab",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] panda ##s : del ##ete rows in data ##frame var_0 based on multiple columns values [SEP]",
        "reference": "df . set_index ( list ( ` BC ` ) ) . drop ( tuples , errors = ` ignore ` ) . reset_index ( )",
        "Output": "df . drop ( df . loc [ df . index . isin ( df . columns ) ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] format the variables str_0 and str_1 using string format ##ting [SEP]",
        "reference": "` ` ` ( { : d } goals , $ { : d } ) ` ` ` . format ( self . goals , self . penalties )",
        "Output": "` ` ` { 0 } { 1 } ` ` ` . format ( ` self . goals ` , ` self . penalties ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "self.goals",
                    "quote": "`",
                    "type": "str"
                },
                "str_1": {
                    "value": "self.penalties",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] format string str_0 with variables var_0 and var_1 [SEP]",
        "reference": "` ` ` ( { } goals , $ { } ) ` ` ` . format ( self . goals , self . penalties )",
        "Output": "` ` ` ( { } goals , $ { } ) ` ` ` . format ( goals , penalties )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "({} goals, ${})",
                    "quote": "\"",
                    "type": "str"
                },
                "var_0": {
                    "value": "goals",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "penalties",
                    "quote": "`",
                    "type": "var"
                },
                "(str_0)": {
                    "value": "({} goals, ${})",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] format string str_0 [SEP]",
        "reference": "` ` ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` ` ` . format ( self )",
        "Output": "",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "({0.goals} goals, ${0.penalties})",
                    "quote": "\"",
                    "type": "str"
                },
                "(str_0)": {
                    "value": "({0.goals} goals, ${0.penalties})",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert list of lists var_0 to list of integers [SEP]",
        "reference": "[ int ( ` ` . join ( str ( d ) for d in x ) ) for x in L ]",
        "Output": "[ map ( int , sublist ) for sublist in L ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "L",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] combine elements of each list in list var_0 into digits of a single integer [SEP]",
        "reference": "[ ` ` . join ( str ( d ) for d in x ) for x in L ]",
        "Output": "L = [ int ( ` ` . join ( x ) ) for x in L ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "L",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert a list of lists var_0 to list of integers [SEP]",
        "reference": "L = [ int ( ` ` . join ( [ str ( y ) for y in x ] ) ) for x in L ]",
        "Output": "[ map ( int , sublist ) for sublist in L ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "L",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] write the elements of list var_0 con ##cate ##nated by special character str_0 to file var_1 [SEP]",
        "reference": "myfile . write ( ` \\ n ` . join ( lines ) )",
        "Output": "[ f . readlines ( ) for j in lines . split ( ` \\ n ` ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "lines",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "\n",
                    "quote": "'",
                    "type": "str"
                },
                "var_1": {
                    "value": "myfile",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] removing an element from a list based on a pre ##dicate str_0 or str_1 [SEP]",
        "reference": "[ x for x in [ ` AAT ` , ` XAC ` , ` ANT ` , ` TTA ` ] if ` X ` not in x and ` N ` not in x ]",
        "Output": "",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "X",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "N",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] remove duplicate words from a string var_0 using reg ##ex [SEP]",
        "reference": "text = re . sub ( ` \\ \\ b ( \\ \\ w + ) ( \\ \\ 1 \\ \\ b ) + ` , ` \\ \\ 1 ` , text )",
        "Output": "re . sub ( ` ( [ a - z ] ) \\ \\ 1 + ` , ` \\ \\ 1 ` , text )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "text",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] count non zero values in each column in panda ##s data frame [SEP]",
        "reference": "df . astype ( bool ) . sum ( axis = 1 )",
        "Output": "( df ! = 0 ) . sum ( axis = 1 )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] search for string that matches regular expression pattern str_0 in string str_1 [SEP]",
        "reference": "re . search ( ` ( ? < ! Distillr ) \\ \\ \\ \\ Acro Tray \\ \\ . exe ` , ` C : \\ \\ Some Dir \\ \\ Acro Tray . exe ` )",
        "Output": "print ( re . search ( ` ( ? < ! Distillr ) \\ \\ \\ \\ Acro Tray \\ \\ . exe ` , ` C : \\ \\ Some Dir \\ \\ Acro Tray . exe ` ) . group ( 1 ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "(?<!Distillr)\\\\AcroTray\\.exe",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "C:\\SomeDir\\AcroTray.exe",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split string str_0 into a list on white spaces [SEP]",
        "reference": "` ` ` QH QD JC KD JS ` ` ` . split ( )",
        "Output": "map ( int , ` QH QD JC KD JS ` . split ( ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "QH QD JC KD JS",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] search for occurrences of reg ##ex pattern str_0 in xml string var_0 [SEP]",
        "reference": "print ( re . search ( ` > . * < ` , line ) . group ( 0 ) )",
        "Output": "print ( re . search ( ` > . * < ` , line ) . group ( 1 ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": ">.*<",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "line",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] erase all the contents of a file var_0 [SEP]",
        "reference": "open ( filename , ` w ` ) . close ( )",
        "Output": "open ( ` file . txt ` , ` w ` ) . close ( )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "filename",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert a string into date ##time using the format str_0 [SEP]",
        "reference": "datetime . datetime . strptime ( string_date , ` % Y - % m - % d % H : % M : % S . % f ` )",
        "Output": "datetime . datetime . strptime ( ` % Y - % m - % d % H : % M : % S . % f ` , ` % H : % M ` ) . date ( )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "%Y-%m-%d %H:%M:%S.%f",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find the index of a list with the first element equal to str_0 within the list of lists var_0 [SEP]",
        "reference": "[ index for index , item in enumerate ( thelist ) if item [ 0 ] = = ` 332 ` ]",
        "Output": "[ i for i , x in enumerate ( thelist ) if x [ 0 ] = = ` 332 ` ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "332",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "thelist",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] lower a string var_0 and remove non - alpha ##num ##eric characters aside from space [SEP]",
        "reference": "re . sub ( ` [ ^ \\ \\ sa - z A - Z0 - 9 ] ` , ` ` , text ) . lower ( ) . strip ( )",
        "Output": "re . sub ( ` [ _ % ^ $ ] ` , ` ` , text )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "text",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] remove all non - alpha ##num ##eric characters except space from a string var_0 and lower it [SEP]",
        "reference": "re . sub ( ` ( ? ! \\ \\ s ) [ \\ \\ W_ ] ` , ` ` , text ) . lower ( ) . strip ( )",
        "Output": "print ( re . sub ( ` [ ^ 0 - 9a - z A - Z ] + ` , ` ` , ` text ` ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "text",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sub ##script text str_0 with str_1 as sub ##script ##ed in mat ##pl ##ot ##lib labels for arrays str_2 and str_3 . [SEP]",
        "reference": "plt . plot ( x , y , label = ` H \u2082 O ` )",
        "Output": "plt . show ( )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "H20",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "2",
                    "quote": "'",
                    "type": "str"
                },
                "str_2": {
                    "value": "x",
                    "quote": "'",
                    "type": "str"
                },
                "str_3": {
                    "value": "y",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sub ##script text str_0 with str_1 as sub ##script ##ed in mat ##pl ##ot ##lib labels for arrays str_2 and str_3 . [SEP]",
        "reference": "plt . plot ( x , y , label = ` $ H_2O $ ` )",
        "Output": "plt . show ( )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "H20",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "2",
                    "quote": "'",
                    "type": "str"
                },
                "str_2": {
                    "value": "x",
                    "quote": "'",
                    "type": "str"
                },
                "str_3": {
                    "value": "y",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] loop over a list var_0 if sub ##lists length equals 3 [SEP]",
        "reference": "[ x for x in mylist if len ( x ) = = 3 ]",
        "Output": "[ lst [ i : j ] for i , j in zip ( mylist , mylist [ 1 : ] ) if i ! = 0 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "mylist",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] initial ##ize a list var_0 of 100 objects object ( ) [SEP]",
        "reference": "lst = [ Object ( ) for _ in range ( 100 ) ]",
        "Output": "lst = [ ( 100 ) for i in range ( 100 ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "lst",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create list var_0 containing 100 instances of object var_1 [SEP]",
        "reference": "lst = [ Object ( ) for i in range ( 100 ) ]",
        "Output": "lst = [ x for x in Object for y in range ( n ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "lst",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "Object",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the content of child tag with var_0 attribute whose parent has cs ##s var_1 [SEP]",
        "reference": "self . driver . find_element_by_css_selector ( ` . someclass a ` ) . get_attribute ( ` href ` )",
        "Output": "print ( soup . find ( ` someclass ` ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "href",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "someclass",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] joining data from data ##frame var_0 with data from data ##frame var_1 based on matching values of column str_0 in both data ##frame ##s [SEP]",
        "reference": "df1 . merge ( df2 , on = ` Date_Time ` )",
        "Output": "df2 = pd . merge ( df1 , df2 , how = ` inner ` , on = [ ` Date_Time ` ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df1",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "df2",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "Date_Time",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] use str_0 operator to print variable values var_0 inside a string [SEP]",
        "reference": "` first string is : % s , second one is : % s ` % ( str1 , ` geo . tif ` )",
        "Output": "str1 = str1 . get ( ` operator ` , ` % s ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "%s",
                    "quote": "`",
                    "type": "str"
                },
                "var_0": {
                    "value": "str1",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] use str_0 operator to print variable values var_0 inside a string [SEP]",
        "reference": "[ x . strip ( ) for x in ` 2 . MATCHES $ $ TEXT $ $ STRING ` . split ( ` $ $ TEXT $ $ ` ) ]",
        "Output": "str1 = str1 . get ( ` operator ` , ` % s ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "%s",
                    "quote": "`",
                    "type": "str"
                },
                "var_0": {
                    "value": "str1",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] check if directory str_0 exists and create it if necessary [SEP]",
        "reference": "if not os . path . exists ( directory ) : os . makedirs ( directory )",
        "Output": "os . path . isfile ( ` directory ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "directory",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] check if a directory var_0 exists and create it if necessary [SEP]",
        "reference": "try : os . makedirs ( path ) except OSError : if not os . path . isdir ( path ) : raise",
        "Output": "os . path . isfile ( os . path . join ( path , ` path ` ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "path",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] check if a directory var_0 exists and create it if necessary [SEP]",
        "reference": "distutils . dir_util . mkpath ( path )",
        "Output": "os . path . isfile ( os . path . join ( path , ` path ` ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "path",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] check if a directory var_0 exists and create it if necessary [SEP]",
        "reference": "try : os . makedirs ( path ) except OSError as exception : if exception . errno ! = errno . EEXIST : raise",
        "Output": "os . path . isfile ( os . path . join ( path , ` path ` ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "path",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] replace a separate word str_0 by str_1 in a string str_2 [SEP]",
        "reference": "re . sub ( ` \\ \\ b H3 \\ \\ b ` , ` H1 ` , text )",
        "Output": "re . sub ( ` text ` , ` text ` , ` text ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "H3",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "H1",
                    "quote": "'",
                    "type": "str"
                },
                "str_2": {
                    "value": "text",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] substitute as ##ci ##i letters in string str_0 with empty string str_1 [SEP]",
        "reference": "re . sub ( ` \\ \\ D ` , ` ` , ` aas30dsa20 ` )",
        "Output": "` ` ` aas30dsa20 ` ` ` . format ( ` ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "aas30dsa20",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get digits only from a string var_0 using lambda function [SEP]",
        "reference": "` ` ` ` ` ` . join ( [ x for x in ` aas30dsa20 ` if x . isdigit ( ) ] )",
        "Output": "[ str ( int ( i ) ) for i in aas30dsa20 . split ( ` ` ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "aas30dsa20",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] access a tag called str_0 in beautiful ##so ##up var_0 [SEP]",
        "reference": "print ( soup . find ( ` name ` ) . string )",
        "Output": "Beautiful Soup ( soup , ` name ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "name",
                    "quote": "\"",
                    "type": "str"
                },
                "var_0": {
                    "value": "soup",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get a dictionary var_0 of key - value pairs in p ##ym ##ong ##o cu ##rso ##r var_1 [SEP]",
        "reference": "records = dict ( ( record [ ` _id ` ] , record ) for record in cursor )",
        "Output": "records = dict ( ( k , v ) for k , v in list ( records . items ( ) ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "records",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "cursor",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create new matrix object by con ##cate ##nat ##ing data from matrix a and matrix b [SEP]",
        "reference": "np . concatenate ( ( A , B ) )",
        "Output": "a = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] con ##cat two matrices var_0 and var_1 in nu ##mp ##y [SEP]",
        "reference": "np . vstack ( ( A , B ) )",
        "Output": "np . set ( ( A , B ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "A",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "B",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the characters count in a file var_0 [SEP]",
        "reference": "os . stat ( filepath ) . st_size",
        "Output": "filepath = Counter ( codecs . open ( ` isfile ` , ` r ` ) . read ( ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "filepath",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] count the occurrences of item str_0 in list var_0 [SEP]",
        "reference": "l . count ( ` a ` )",
        "Output": "sum ( a = = type for a , count in enumerate ( l ) if a = = ` a ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "a",
                    "quote": "\"",
                    "type": "str"
                },
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] count the occurrences of items in list var_0 [SEP]",
        "reference": "Counter ( l )",
        "Output": "sum ( i = = j for i , j in zip ( l , l ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] count the occurrences of items in list var_0 [SEP]",
        "reference": "[ [ x , l . count ( x ) ] for x in set ( l ) ]",
        "Output": "sum ( i = = j for i , j in zip ( l , l ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] count the occurrences of items in list var_0 [SEP]",
        "reference": "dict ( ( x , l . count ( x ) ) for x in set ( l ) )",
        "Output": "sum ( i = = j for i , j in zip ( l , l ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] count the occurrences of item str_0 in list var_0 [SEP]",
        "reference": "l . count ( ` b ` )",
        "Output": "sum ( b = = type for b , count in enumerate ( l ) if b = = ` b ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "b",
                    "quote": "\"",
                    "type": "str"
                },
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] copy file var_0 to directory var_1 [SEP]",
        "reference": "shutil . copy ( srcfile , dstdir )",
        "Output": "shutil . copy2 ( srcfile , dstdir )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "srcfile",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "dstdir",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find the key associated with the largest value in dictionary var_0 whilst key is non - zero value [SEP]",
        "reference": "max ( k for k , v in x . items ( ) if v ! = 0 )",
        "Output": "max ( v for k , v in list ( x . items ( ) ) if k ! = 0 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "x",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the largest key whose not associated with value of 0 in dictionary var_0 [SEP]",
        "reference": "( k for k , v in x . items ( ) if v ! = 0 )",
        "Output": "max ( x , key = lambda k : x [ k ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "x",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the largest key in a dictionary var_0 with non - zero value [SEP]",
        "reference": "max ( k for k , v in x . items ( ) if v ! = 0 )",
        "Output": "max ( x , key = lambda x : x [ x ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "x",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] put the curse ##r at beginning of the file [SEP]",
        "reference": "file . seek ( 0 )",
        "Output": "print ( line . rstrip ( ) )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] combine values from column str_0 and column str_1 of data ##frame var_0 into column str_2 of data ##fra ##m var_0 [SEP]",
        "reference": "df [ ` c ` ] = np . where ( df [ ` a ` ] . isnull , df [ ` b ` ] , df [ ` a ` ] )",
        "Output": "df [ ` c ` ] = df [ ` c ` ] . apply ( lambda x : sum ( x [ ` c ` ] , axis = 1 ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "b",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "a",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                },
                "str_2": {
                    "value": "c",
                    "quote": "'",
                    "type": "str"
                },
                "var_1": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] remove key str_0 from dictionary var_0 [SEP]",
        "reference": "del d [ ` ele ` ]",
        "Output": "d = dict ( ( k [ 0 ] , v . ele ) for k , v in list ( d . items ( ) ) if k ! = ` ele ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "ele",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "d",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] update date ##time field in var_0 to be the existing var_1 plus 100 years [SEP]",
        "reference": "My Model . objects . update ( timestamp = F ( ` timestamp ` ) + timedelta ( days = 36524 ) )",
        "Output": "My Model = datetime . datetime . now ( )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "MyModel",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "timestamp",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] merge list str_0 and list str_1 and list str_2 into one list [SEP]",
        "reference": "[ ` it ` ] + [ ` was ` ] + [ ` annoying ` ]",
        "Output": "[ list ( x ) for x in zip ( * [ ` was ` ] ) ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "['it']",
                    "quote": "`",
                    "type": "str"
                },
                "str_1": {
                    "value": "['was']",
                    "quote": "`",
                    "type": "str"
                },
                "str_2": {
                    "value": "['annoying']",
                    "quote": "`",
                    "type": "str"
                },
                "[str_0]": {
                    "value": "['it']",
                    "quote": "`",
                    "type": "str"
                },
                "[str_1]": {
                    "value": "['was']",
                    "quote": "`",
                    "type": "str"
                },
                "[str_2]": {
                    "value": "['annoying']",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] inc ##rem ##ent a value with leading zero ##es in a number var_0 [SEP]",
        "reference": "str ( int ( x ) + 1 ) . zfill ( len ( x ) )",
        "Output": "print ( int ( x , 2 ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "x",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] check if a panda ##s data ##frame var_0 ' s index is sorted [SEP]",
        "reference": "all ( df . index [ : - 1 ] < = df . index [ 1 : ] )",
        "Output": "df . apply ( lambda x : len ( x ) = = 3 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert tu ##ple var_0 to list [SEP]",
        "reference": "list ( t )",
        "Output": "[ x for x in t for x in t ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "t",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert list var_0 to tu ##ple [SEP]",
        "reference": "tuple ( l )",
        "Output": "tuple ( t )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "t",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert tu ##ple var_0 to list [SEP]",
        "reference": "level1 = map ( list , level1 )",
        "Output": "[ x for x in level1 for x in level1 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "level1",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] send the output of pp ##rin ##t object var_0 to file var_1 [SEP]",
        "reference": "pprint . pprint ( dataobject , log File )",
        "Output": "dataobject . close ( )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "dataobject",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "logFile",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get index of rows in column str_0 [SEP]",
        "reference": "df . loc [ df [ ` Bool Col ` ] ]",
        "Output": "df . reset_index ( inplace = ` True ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "BoolCol",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create a list containing the index ##es of rows where the value of column str_0 in data ##frame var_0 are equal to true [SEP]",
        "reference": "df . iloc [ np . flatnonzero ( df [ ` Bool Col ` ] ) ]",
        "Output": "df . apply ( lambda x : x . index ( df . iloc [ x ] ) , axis = 1 )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "BoolCol",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get list of index ##es of rows where column str_0 values match true [SEP]",
        "reference": "df [ df [ ` Bool Col ` ] = = True ] . index . tolist ( )",
        "Output": "[ i for i in range ( x . shape [ 0 ] ) if x [ i ] = = 1 ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "BoolCol",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get index of rows in data ##frame var_0 which column str_0 matches value true [SEP]",
        "reference": "df [ df [ ` Bool Col ` ] ] . index . tolist ( )",
        "Output": "df [ df [ ` Bool Col ` ] = = [ ` Bool Col ` ] ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "BoolCol",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] change working directory to the directory var_0 [SEP]",
        "reference": "os . chdir ( owd )",
        "Output": "os . chdir ( owd )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "owd",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] insert data from a string var_0 to sql ##ite db var_1 [SEP]",
        "reference": "c . execute ( ` INSERT INTO test VALUES ( ? , ` bar ` ) ` , ( testfield , ) )",
        "Output": "c . execute ( ` testfield ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "testfield",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "c",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] deco ##de string str_0 into a normal string [SEP]",
        "reference": "` ` ` \\ \\ x89 \\ \\ n ` ` ` . decode ( ` string_escape ` )",
        "Output": "` ` ` \\ \\ x89 \\ \\ n ` ` ` . decode ( ` unicode - escape ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "\\x89\\n",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert a raw string var_0 into a normal string [SEP]",
        "reference": "raw_string . decode ( ` string_escape ` )",
        "Output": "raw_string . decode ( ` string_escape ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "raw_string",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert a raw string var_0 into a normal string [SEP]",
        "reference": "raw_byte_string . decode ( ` unicode_escape ` )",
        "Output": "raw_byte_string . decode ( ` string_escape ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "raw_byte_string",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split a string var_0 with into all strings of repeated characters [SEP]",
        "reference": "[ m . group ( 0 ) for m in re . finditer ( ` ( \\ \\ d ) \\ \\ 1 * ` , s ) ]",
        "Output": "print ( [ list ( g ) for k , g in groupby ( s , key = len ) ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sc ##atter a plot with x , y position of str_0 and face color equal to none [SEP]",
        "reference": "plt . scatter ( np . random . randn ( 100 ) , np . random . randn ( 100 ) , facecolors = ` none ` )",
        "Output": "plt . show ( )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "np.random.randn(100)",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] do a sc ##atter plot with empty circles [SEP]",
        "reference": "plt . plot ( np . random . randn ( 100 ) , np . random . randn ( 100 ) , ` o ` , mfc = ` none ` )",
        "Output": "plt . scatter ( x , y , c = r , s = 100 )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] remove a di ##v with a id str_0 using beautiful ##so ##up [SEP]",
        "reference": "soup . find ( ` div ` , id = ` main - content ` ) . decompose ( )",
        "Output": "div = soup . find ( ` main - content ` , id = re . compile ( ` main - content ` ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "main-content",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] filter rows containing key word var_0 in column var_1 [SEP]",
        "reference": "df [ df [ ` ids ` ] . str . contains ( ` ball ` ) ]",
        "Output": "ids [ ` ball ` ] = ids [ ` ball ` ] . filter ( str ( pattern ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "ball",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "ids",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert index at level 0 into a column in data ##frame var_0 [SEP]",
        "reference": "df . reset_index ( level = 0 , inplace = True )",
        "Output": "df . set_index ( 0 , inplace = ` True ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] add index ##es in a data frame var_0 to a column var_1 [SEP]",
        "reference": "df [ ` index1 ` ] = df . index",
        "Output": "df [ ` index1 ` ] = df . apply ( lambda x : list ( index1 ) , axis = 1 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "index1",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert panda ##s index in a data ##frame to columns [SEP]",
        "reference": "df . reset_index ( level = [ ` tick ` , ` obs ` ] )",
        "Output": "df = df . reset_index ( )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] get reverse of list items from list str_0 using extended slicing [SEP]",
        "reference": "[ x [ : : - 1 ] for x in b ]",
        "Output": "b [ - 1 ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "b",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] join each element in array var_0 with element at the same index in array var_1 as a tu ##ple [SEP]",
        "reference": "np . array ( [ zip ( x , y ) for x , y in zip ( a , b ) ] )",
        "Output": "array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "b",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] zip two 2 - d arrays var_0 and var_1 [SEP]",
        "reference": "np . array ( zip ( a . ravel ( ) , b . ravel ( ) ) , dtype = ` i4 , i4 ` ) . reshape ( a . shape )",
        "Output": "np . zip ( np . repeat ( a , b ) , np . array ( a ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "b",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert list var_0 into a com ##ma separated string [SEP]",
        "reference": "` ` ` , ` ` ` . join ( [ str ( i ) for i in list_of_ints ] )",
        "Output": "` ` ` ` ` ` . join ( map ( str , list_of_ints ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "list_of_ints",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] send a post request with raw data var_0 and basic authentication with var_1 and var_2 [SEP]",
        "reference": "requests . post ( url , data = DATA , headers = HEADERS_DICT , auth = ( username , password ) )",
        "Output": "post_response = requests . post ( password , headers = password )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "DATA",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "username",
                    "quote": "`",
                    "type": "var"
                },
                "var_2": {
                    "value": "password",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find last occurrence of character str_0 in string str_1 [SEP]",
        "reference": "` ` ` abcd } def } ` ` ` . rfind ( ` } ` )",
        "Output": "` ` ` abcd } def } ` ` ` . rfind ( ` } ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "}",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "abcd}def}",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] it ##erate o ##ve list str_0 using list comprehension [SEP]",
        "reference": "print ( [ item for item in [ 1 , 2 , 3 ] ] )",
        "Output": "[ [ n [ i ] for i in [ 1 , 2 , 3 ] for j in range ( [ 1 , 2 , 3 ] [ i ] ) ] ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "[1, 2, 3]",
                    "quote": "`",
                    "type": "str"
                },
                "[str_0]": {
                    "value": "[1, 2, 3]",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] extract all the values with keys str_0 and str_1 from a list of di ##ction ##aries var_0 to list of tu ##ples [SEP]",
        "reference": "[ ( x [ ` x ` ] , x [ ` y ` ] ) for x in d ]",
        "Output": "[ ( x [ ` x ` ] , x [ ` y ` ] ) for x in d ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "x",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "y",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "d",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the file ##name without the extension from file str_0 [SEP]",
        "reference": "print ( os . path . splitext ( os . path . basename ( ` hemanth . txt ` ) ) [ 0 ] )",
        "Output": "os . path . basename ( filename )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "hemanth.txt",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create a dictionary by adding each two adjacent elements in tu ##ple var_0 as key / value pair to it [SEP]",
        "reference": "dict ( x [ i : i + 2 ] for i in range ( 0 , len ( x ) , 2 ) )",
        "Output": "dict ( ( k , tuple ( v ) ) for k , v in zip ( x [ 0 : : 2 ] , x [ 1 : : 2 ] ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "x",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create a list containing flattened list str_0 [SEP]",
        "reference": "values = sum ( [ [ ` A ` , ` B ` , ` C ` ] , [ ` D ` , ` E ` , ` F ` ] , [ ` G ` , ` H ` , ` I ` ] ] , [ ] )",
        "Output": "[ [ x ] for x in range ( 5 ) ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]",
                    "quote": "`",
                    "type": "str"
                },
                "[str_0]": {
                    "value": "[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] select rows in a data ##frame var_0 column str_0 between two values 99 and 101 [SEP]",
        "reference": "df = df [ ( df [ ` closing_price ` ] > = 99 ) & ( df [ ` closing_price ` ] < = 101 ) ]",
        "Output": "df [ df [ ` closing_price ` ] < 101 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "closing_price",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] replace all occur ##ence ##s of new ##lines str_0 with str_1 in data ##frame var_0 [SEP]",
        "reference": "df . replace ( { ` \\ n ` : ` < br > ` } , regex = True )",
        "Output": "df . replace ( ` \\ n ` , ` < br > ` ) . replace ( ` < br > ` , ` smtplib ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "\n",
                    "quote": "`",
                    "type": "str"
                },
                "str_1": {
                    "value": "<br>",
                    "quote": "`",
                    "type": "str"
                },
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] replace all occurrences of a string str_0 by string str_1 in a panda ##s data frame var_0 [SEP]",
        "reference": "df . replace ( { ` \\ n ` : ` < br > ` } , regex = True )",
        "Output": "df [ ` < br > ` ] = df [ ` \\ n ` ] . str . replace ( ` < br > ` , ` ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "\n",
                    "quote": "`",
                    "type": "str"
                },
                "str_1": {
                    "value": "<br>",
                    "quote": "`",
                    "type": "str"
                },
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create a list containing each two adjacent letters in string var_0 as its elements [SEP]",
        "reference": "[ ( x + y ) for x , y in zip ( word , word [ 1 : ] ) ]",
        "Output": "[ list ( y ) for x , y in zip ( word [ 1 : ] , word [ 2 : ] ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "word",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get a list of pairs from a string var_0 using lambda function [SEP]",
        "reference": "list ( map ( lambda x , y : x + y , word [ : - 1 ] , word [ 1 : ] ) )",
        "Output": "[ list ( g ) for _ , g in groupby ( word , key = lambda x : x [ 1 ] ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "word",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] extract a ur ##l from a string var_0 [SEP]",
        "reference": "print ( re . findall ( ` ( https ? : / / [ ^ \\ \\ s ] + ) ` , my String ) )",
        "Output": "re . findall ( ` \\ \\ * \\ \\ * + ` , my String )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "myString",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] extract a ur ##l from a string var_0 [SEP]",
        "reference": "print ( re . search ( ` ( ? P < url > https ? : / / [ ^ \\ \\ s ] + ) ` , my String ) . group ( ` url ` ) )",
        "Output": "re . findall ( ` \\ \\ * \\ \\ * + ` , my String )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "myString",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] remove all special characters , pun ##ct ##uation and spaces from a string var_0 using reg ##ex [SEP]",
        "reference": "re . sub ( ` [ ^ A - Za - z0 - 9 ] + ` , ` ` , mystring )",
        "Output": "re = ` ` . join ( c for c in mystring if c ! = ` punctuation ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "mystring",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create a date ##time ##ind ##ex containing 13 periods of the second friday of each month starting from date str_0 [SEP]",
        "reference": "pd . date_range ( ` 2016 - 01 - 01 ` , freq = ` WOM - 2FRI ` , periods = 13 )",
        "Output": "datetime . datetime . now ( )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "2016-01-01",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create multi ##dim ##ens ##ional array var_0 with 3 rows and 2 columns in python [SEP]",
        "reference": "matrix = [ [ a , b ] , [ c , d ] , [ e , f ] ]",
        "Output": "matrix = pd . Data Frame ( [ [ 1 , 2 ] , [ 3 , 4 ] ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "matrix",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] replace spaces with under ##sco ##re [SEP]",
        "reference": "mystring . replace ( ` ` , ` _ ` )",
        "Output": "print ( re . sub ( ` _ ` , ` _ ` ) . replace ( ` : ` , ` _ ` ) . replace ( ` : ` , ` _ ` ) )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] get an absolute file path of file str_0 [SEP]",
        "reference": "os . path . abspath ( ` mydir / myfile . txt ` )",
        "Output": "os . path . abspath ( os . path . dirname ( __file__ ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "mydir/myfile.txt",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split string var_0 on white spaces [SEP]",
        "reference": "` ` ` ` ` ` . join ( my_string . split ( ) )",
        "Output": "my_string . split ( )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "my_string",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get file ##name without extension from file var_0 [SEP]",
        "reference": "os . path . splitext ( filename ) [ 0 ]",
        "Output": "os . path . splitext ( filename ) [ 0 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "filename",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get a list containing the sum of each element var_0 in list var_1 plus the previous elements [SEP]",
        "reference": "[ sum ( l [ : i ] ) for i , _ in enumerate ( l ) ]",
        "Output": "[ ( i + j ) for i , j in zip ( l , l ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "i",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split a string str_0 by str_1 keeping str_1 in the result [SEP]",
        "reference": "` ` ` Docs / src / Scripts / temp ` ` ` . replace ( ` / ` , ` / \\ x00 / ` ) . split ( ` \\ x00 ` )",
        "Output": "` ` ` Docs / src / Scripts / temp ` ` ` . split ( ` / ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "Docs/src/Scripts/temp",
                    "quote": "`",
                    "type": "str"
                },
                "str_1": {
                    "value": "/",
                    "quote": "`",
                    "type": "str"
                },
                "str_2": {
                    "value": "/",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] shuffle columns of an nu ##mp ##y array str_0 [SEP]",
        "reference": "np . random . shuffle ( np . transpose ( r ) )",
        "Output": "np . concatenate ( ( r [ ( 0 ) , : ] , r [ : , ( 1 ) ] ) , axis = 1 )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "r",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] copy all values in a column str_0 to a new column str_1 in a panda ##s data frame str_2 [SEP]",
        "reference": "df [ ` D ` ] = df [ ` B ` ]",
        "Output": "df [ ` D ` ] = df [ ` D ` ] . fillna ( 1 )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "B",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "D",
                    "quote": "'",
                    "type": "str"
                },
                "str_2": {
                    "value": "df",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find a value within nest ##ed j ##son str_0 where the key inside another key str_1 is unknown . [SEP]",
        "reference": "list ( data [ ` A ` ] [ ` B ` ] . values ( ) ) [ 0 ] [ ` maindata ` ] [ 0 ] [ ` Info ` ]",
        "Output": "[ x for x in list ( data . values ( ) ) if x [ ` B ` ] [ ` B ` ] = = ` B ` ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "data",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "B",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] check characters of string var_0 are true pre ##dication of function var_1 [SEP]",
        "reference": "all ( predicate ( x ) for x in string )",
        "Output": "isinstance ( string , predicate )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "string",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "predicate",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] determine number of files on a drive with python [SEP]",
        "reference": "os . statvfs ( ` / ` ) . f_files - os . statvfs ( ` / ` ) . f_ffree",
        "Output": "os . path . join ( os . path ( f . name ) . filename , 1 )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] determine number of files on a drive with python [SEP]",
        "reference": "cursor . fetchone ( ) [ 0 ]",
        "Output": "os . path . join ( os . path ( f . name ) . filename , 1 )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] convert string var_0 into a list of integers var_1 [SEP]",
        "reference": "user_list = [ int ( number ) for number in user_input . split ( ` , ` ) ]",
        "Output": "[ int ( x ) for x in user_input . split ( ` , ` ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "user_input",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "user_list",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get a list of integers by splitting a string var_0 with com ##ma [SEP]",
        "reference": "[ int ( s ) for s in user . split ( ` , ` ) ]",
        "Output": "[ int ( x ) for x in user . split ( ` , ` ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "user",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get a list of integers by splitting a string var_0 with com ##ma [SEP]",
        "reference": "sorted ( list , key = lambda x : ( x [ 0 ] , - x [ 1 ] ) )",
        "Output": "[ int ( x ) for x in user . split ( ` , ` ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "user",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list of objects var_0 , based on a function var_1 in descending order [SEP]",
        "reference": "ut . sort ( key = cmpfun , reverse = True )",
        "Output": "ut . sort ( key = lambda x : x . cmpfun )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "ut",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "cmpfun",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] reverse list var_0 based on the var_1 attribute of each object [SEP]",
        "reference": "ut . sort ( key = lambda x : x . count , reverse = True )",
        "Output": "[ x [ ` count ` ] for x in ut ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "ut",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "count",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list of objects var_0 in reverse order by their var_1 property [SEP]",
        "reference": "ut . sort ( key = lambda x : x . count , reverse = True )",
        "Output": "ut . sort ( key = lambda x : x . count )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "ut",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "count",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] click a hr ##ef button str_0 with se ##len ##ium [SEP]",
        "reference": "driver . find_element_by_partial_link_text ( ` Send ` ) . click ( )",
        "Output": "driver . find_element_by_xpath ( ` Send ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "Send",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] click a hr ##ef button having text str_0 with se ##len ##ium [SEP]",
        "reference": "driver . find Element ( By . link Text ( ` Send In Mail ` ) ) . click ( )",
        "Output": "driver . get ( ` Send In Mail ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "Send InMail",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] click a hr ##ef button with text str_0 with se ##len ##ium [SEP]",
        "reference": "driver . find_element_by_link_text ( ` Send In Mail ` ) . click ( )",
        "Output": "driver . find_element_by_xpath ( ` Send In Mail ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "Send InMail",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] cast an int var_0 to a string and con ##cat to string str_0 [SEP]",
        "reference": "` ME ` + str ( i )",
        "Output": "str ( i )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "i",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "ME",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] cast an int var_0 to a string and con ##cat to string str_0 [SEP]",
        "reference": "df . sort_values ( [ ` System_num ` , ` Dis ` ] )",
        "Output": "str ( i )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "i",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "ME",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] prep ##end the line str_0 to the contents of file str_1 and save as the file str_2 [SEP]",
        "reference": "open ( ` outfile ` , ` w ` ) . write ( ` # test firstline \\ n ` + open ( ` infile ` ) . read ( ) )",
        "Output": "f . write ( ` # test firstline \\ n ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "#test firstline\n",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "infile",
                    "quote": "'",
                    "type": "str"
                },
                "str_2": {
                    "value": "outfile",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list var_0 by length of value in tu ##ple [SEP]",
        "reference": "l . sort ( key = lambda t : len ( t [ 1 ] ) , reverse = True )",
        "Output": "print ( sorted ( l , key = lambda x : len ( x [ 1 ] ) , reverse = ` True ` ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split string var_0 by words that ends with str_0 [SEP]",
        "reference": "re . findall ( ` \\ \\ b ( \\ \\ w + ) d \\ \\ b ` , s )",
        "Output": "s . split ( ` d ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "d",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] return var_0 if string var_1 contains reg ##ex str_0 [SEP]",
        "reference": "bool ( re . search ( ` ba [ rzd ] ` , ` foobarrrr ` ) )",
        "Output": "re . search ( ` ba [ rzd ] ` , True ) . group ( )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "True",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "foobarrrr",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "ba[rzd]",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] removing duplicate ##s in list var_0 [SEP]",
        "reference": "list ( set ( t ) )",
        "Output": "list ( set ( t ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "t",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] removing duplicate ##s in list var_0 [SEP]",
        "reference": "list ( set ( source_list ) )",
        "Output": "list ( set ( source_list ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "source_list",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] removing duplicate ##s in list var_0 [SEP]",
        "reference": "list ( Ordered Dict . fromkeys ( ` abracadabra ` ) )",
        "Output": "list ( set ( abracadabra ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "abracadabra",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert array var_0 into a list [SEP]",
        "reference": "numpy . array ( a ) . reshape ( - 1 ) . tolist ( )",
        "Output": "list ( map ( list , a ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert the first row of nu ##mp ##y matrix var_0 to a list [SEP]",
        "reference": "numpy . array ( a ) [ 0 ] . tolist ( )",
        "Output": "a = numpy . vstack ( a , axis = 0 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] in var_0 , get the content of the sibling of the var_1 tag with text content str_0 [SEP]",
        "reference": "print ( soup . find ( text = ` Address : ` ) . find Next ( ` td ` ) . contents [ 0 ] )",
        "Output": "soup . split ( ` Address : ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "soup",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "td",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "Address:",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert elements of each tu ##ple in list var_0 into a string separated by character str_0 [SEP]",
        "reference": "` ` ` ` ` ` . join ( [ ( ` % d @ % d ` % t ) for t in l ] )",
        "Output": "l = [ list ( v ) for k , v in groupby ( l , key = lambda x : x [ 0 ] ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "@",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert each tu ##ple in list var_0 to a string with str_0 separating the tu ##ples ' elements [SEP]",
        "reference": "` ` ` ` ` ` . join ( [ ( ` % d @ % d ` % ( t [ 0 ] , t [ 1 ] ) ) for t in l ] )",
        "Output": "[ tuple ( x [ 0 ] for x in l ) for x in l ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "@",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the html from the current web page of a se ##len ##ium driver [SEP]",
        "reference": "driver . execute_script ( ` return document . document Element . outer HTML ; ` )",
        "Output": "page_source = browser . page_source",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] get all matches with reg ##ex pattern str_0 in list of string var_0 [SEP]",
        "reference": "[ i for i in teststr if re . search ( ` \\ \\ d + [ x X ] ` , i ) ]",
        "Output": "[ re . split ( ` \\ \\ d + [ x X ] ` , teststr ) for line in teststr ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "\\d+[xX]",
                    "quote": "`",
                    "type": "str"
                },
                "var_0": {
                    "value": "teststr",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] select values from column str_0 for which corresponding values in column str_1 will be greater than 50 , and in column str_2 - equal 900 in data ##frame var_0 [SEP]",
        "reference": "df [ ` A ` ] [ ( df [ ` B ` ] > 50 ) & ( df [ ` C ` ] = = 900 ) ]",
        "Output": "df [ df [ ` B ` ] > 50 ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "A",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "B",
                    "quote": "'",
                    "type": "str"
                },
                "str_2": {
                    "value": "C",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort dictionary var_0 in ascending order based on its keys and items [SEP]",
        "reference": "sorted ( o . items ( ) )",
        "Output": "sorted ( list ( o . items ( ) ) , key = lambda v : ( v [ 1 ] , v [ 1 ] ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "o",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get sorted list of keys of di ##ct var_0 [SEP]",
        "reference": "sorted ( d )",
        "Output": "sorted ( d , key = d . get )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "d",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get sorted list of keys of di ##ct var_0 [SEP]",
        "reference": "sorted ( d . items ( ) )",
        "Output": "sorted ( d , key = d . get )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "d",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert string str_0 into integer [SEP]",
        "reference": "int ( ` 1 ` )",
        "Output": "int ( ` 1 ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "1",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] function to convert strings into integers [SEP]",
        "reference": "int ( )",
        "Output": "map ( int , ` ` . join ( [ int ( x ) for x in test . split ( ) ] ) )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] convert items in var_0 to integers [SEP]",
        "reference": "T2 = [ map ( int , x ) for x in T1 ]",
        "Output": "T1 = [ int ( i ) for i in T1 . split ( ` , ` ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "T1",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] call a shell script str_0 using sub ##pro ##ces ##s [SEP]",
        "reference": "subprocess . call ( [ ` . / test . sh ` ] )",
        "Output": "subprocess . call ( [ ` ls ` , ` - l ` ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "./test.sh",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] call a shell script var_0 using sub ##pro ##ces ##s [SEP]",
        "reference": "subprocess . call ( [ ` notepad ` ] )",
        "Output": "notepad = subprocess . Popen ( [ ` ls ` , ` - l ` ] , stdout = subprocess . PIPE )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "notepad",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] combine lists var_0 and var_1 by alternating their elements [SEP]",
        "reference": "[ val for pair in zip ( l1 , l2 ) for val in pair ]",
        "Output": "[ ( x + y ) for x , y in zip ( l1 , l2 ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l1",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "l2",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] en ##code string str_0 [SEP]",
        "reference": "encoded = base64 . b64encode ( ` data to be encoded ` )",
        "Output": "` ` ` data to be encoded ` ` ` . encode ( ` utf - 8 ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "data to be encoded",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] en ##code a string str_0 to var_0 encoding [SEP]",
        "reference": "encoded = ` data to be encoded ` . encode ( ` ascii ` )",
        "Output": "ascii = ascii . encode ( ` utf - 8 ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "data to be encoded",
                    "quote": "`",
                    "type": "str"
                },
                "var_0": {
                    "value": "ascii",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] par ##se tab - del ##imi ##ted cs ##v file str_0 into a list [SEP]",
        "reference": "lol = list ( csv . reader ( open ( ` text . txt ` , ` rb ` ) , delimiter = ` \\ t ` ) )",
        "Output": "list ( open ( ` text . txt ` ) . read ( ) . split ( ` \\ t ` ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "text.txt",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get attribute var_0 of object var_1 [SEP]",
        "reference": "getattr ( my_object , my_str )",
        "Output": "getattr ( my_object , my_str )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "my_str",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "my_object",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] group a list of di ##cts var_0 into one di ##ct by key [SEP]",
        "reference": "print ( dict ( zip ( LD [ 0 ] , zip ( * [ list ( d . values ( ) ) for d in LD ] ) ) ) )",
        "Output": "dict ( [ ( key , list ( d . values ( ) ) ) for d in LD ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "LD",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] group a list of di ##cts var_0 into one di ##ct by key [SEP]",
        "reference": "sum ( [ pair [ 0 ] for pair in list_of_pairs ] )",
        "Output": "dict ( [ ( key , list ( d . values ( ) ) ) for d in LD ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "LD",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert unicode string u str_0 into dictionary [SEP]",
        "reference": "d = ast . literal_eval ( ` { ` code1 ` : 1 , ` code2 ` : 1 } ` )",
        "Output": "json . loads ( ` { ` code1 ` : 1 , ` code2 ` : 1 } ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "{'code1':1,'code2':1}",
                    "quote": "\"",
                    "type": "str"
                },
                "{str_0}": {
                    "value": "{'code1':1,'code2':1}",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find all words in a string var_0 that start with the str_0 sign [SEP]",
        "reference": "[ word for word in mystring . split ( ) if word . startswith ( ` $ ` ) ]",
        "Output": "print ( [ x for x in mystring . split ( ) if not x . startswith ( ` # ` ) ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "mystring",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "$",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] remove any ur ##l within string var_0 [SEP]",
        "reference": "text = re . sub ( ` ^ https ? : \\ \\ / \\ \\ / . * [ \\ \\ r \\ \\ n ] * ` , ` ` , text , flags = re . MULTILINE )",
        "Output": "re . sub ( ` \\ \\ ` ` , ` ` , text )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "text",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] replace all elements in array var_0 that are not present in array str_0 with zero ##s [SEP]",
        "reference": "np . where ( np . in1d ( A , [ 1 , 3 , 4 ] ) . reshape ( A . shape ) , A , 0 )",
        "Output": "np . fillna ( A , axis = 0 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "A",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "[1, 3, 4]",
                    "quote": "`",
                    "type": "str"
                },
                "[str_0]": {
                    "value": "[1, 3, 4]",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] calculate mean across dimension in a 2d array var_0 [SEP]",
        "reference": "np . mean ( a , axis = 1 )",
        "Output": "np . sum ( ( x . reshape ( x . shape [ 0 ] ) . sum ( axis = 0 ) for x in a ) , axis = 1 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] running r script str_0 from python [SEP]",
        "reference": "subprocess . call ( [ ` / usr / bin / Rscript ` , ` - - vanilla ` , ` / pathto / Myr Script . r ` ] )",
        "Output": "exec ( compile ( ` / pathto / Myr Script . r ` ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "/pathto/MyrScript.r",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] run r script str_0 [SEP]",
        "reference": "subprocess . call ( ` / usr / bin / Rscript - - vanilla / pathto / Myr Script . r ` , shell = True )",
        "Output": "exec ( compile ( open ( ` / usr / bin / Rscript - - vanilla / pathto / Myr Script . r ` ) . read ( ) , ` / usr / bin / Rscript - - vanilla / pathto / Myr Script . r ` , ` exec ` ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "/usr/bin/Rscript --vanilla /pathto/MyrScript.r",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] add a header to a cs ##v file [SEP]",
        "reference": "writer . writeheader ( )",
        "Output": "writer . writerow ( [ row [ 0 ] , row [ 1 ] , row [ 2 ] ] )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] replacing nan in the data ##frame var_0 with row average [SEP]",
        "reference": "df . fillna ( df . mean ( axis = 1 ) , axis = 1 )",
        "Output": "df . fillna ( df [ ` count ` ] . apply ( lambda x : x . shape [ 0 ] , inplace = ` True ` ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert unix times ##tam ##p str_0 to format ##ted string str_1 [SEP]",
        "reference": "time . strftime ( ` % Y - % m - % d % H : % M : % S ` , time . localtime ( 1347517370 ) )",
        "Output": "time . mktime ( time . mktime ( datetime . datetime . fromtimestamp ( s ) . timetuple ( ) ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "1347517370",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "%Y-%m-%d %H:%M:%S",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] call a base class ' s class method var_0 from derived class var_1 [SEP]",
        "reference": "super ( Derived , cls ) . do ( a )",
        "Output": "super ( do , self ) . __init__ ( name , Derived )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "do",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "Derived",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] selecting rows in nu ##mp ##y n ##dar ##ray str_0 , where the value in the first column is 0 and value in the second column is 1 [SEP]",
        "reference": "a [ np . where ( ( a [ : , ( 0 ) ] = = 0 ) * ( a [ : , ( 1 ) ] = = 1 ) ) ]",
        "Output": "a [ np . where ( a [ : , ( 0 ) ] = = 1 , axis = 0 ) ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "a",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] separate words del ##imi ##ted by one or more spaces into a list [SEP]",
        "reference": "re . split ( ` + ` , ` hello world sample text ` )",
        "Output": "[ ` ` . join ( x ) for x in l . split ( ` , ` ) ]",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] length of longest element in list var_0 [SEP]",
        "reference": "len ( max ( words , key = len ) )",
        "Output": "max ( len ( i ) for i in words )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "words",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the value associated with unicode key str_0 of first dictionary in list var_0 [SEP]",
        "reference": "result [ 0 ] [ ` from_user ` ]",
        "Output": "print ( [ x [ ` from_user ` ] for x in result ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "from_user",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "result",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] retrieve each line from a file str_0 as a list [SEP]",
        "reference": "[ line . split ( ) for line in open ( ` File . txt ` ) ]",
        "Output": "with open ( ` File . txt ` , ` rb ` ) as f : my_list = [ open ( ` file . txt ` , ` r ` ) . readlines ( ) [ 1 ] for line in open ( ` File . txt ` ) ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "File.txt",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] swap keys with values in a dictionary var_0 [SEP]",
        "reference": "res = dict ( ( v , k ) for k , v in a . items ( ) )",
        "Output": "a = { k : v for k , v in list ( a . items ( ) ) }",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] open a file str_0 in write mode [SEP]",
        "reference": "new_file = open ( ` path / to / FILE_NAME . ext ` , ` w ` )",
        "Output": "with open ( ` path / to / FILE_NAME . ext ` , ` wb ` ) as f : stream . write ( ` path / to / FILE_NAME . ext ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "path/to/FILE_NAME.ext",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] open a file str_0 in write mode [SEP]",
        "reference": "df . groupby ( [ ` col1 ` , ` col2 ` ] ) [ ` col3 ` ] . nunique ( ) . reset_index ( )",
        "Output": "with open ( ` path / to / FILE_NAME . ext ` , ` wb ` ) as f : stream . write ( ` path / to / FILE_NAME . ext ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "path/to/FILE_NAME.ext",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] check if any key in the dictionary var_0 starts with the string str_0 [SEP]",
        "reference": "any ( key . startswith ( ` EMP $ $ ` ) for key in dict1 )",
        "Output": "dict1 . startswith ( ` EMP $ $ ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "dict1",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "EMP$$",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create list of values from dictionary var_0 that have a key that starts with str_0 [SEP]",
        "reference": "[ value for key , value in list ( dict1 . items ( ) ) if key . startswith ( ` EMP $ $ ` ) ]",
        "Output": "[ v for k , v in list ( dict1 . items ( ) ) if v . startswith ( ` EMP $ $ ` ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "dict1",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "EMP$$",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert a panda ##s series var_0 into a panda ##s data ##frame var_1 with columns var_2 and var_3 [SEP]",
        "reference": "pd . Data Frame ( { ` email ` : sf . index , ` list ` : sf . values } )",
        "Output": "df . reset_index ( drop = ` True ` ) . reset_index ( drop = ` True ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "sf",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                },
                "var_2": {
                    "value": "email",
                    "quote": "`",
                    "type": "var"
                },
                "var_3": {
                    "value": "list",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] print elements of list var_0 sep ##erated by tab ##s str_0 [SEP]",
        "reference": "print ( ` \\ t ` . join ( map ( str , list ) ) )",
        "Output": "print ( ` \\ t ` . join ( list ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "list",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "\t",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] print unicode string str_0 with ut ##f - 8 [SEP]",
        "reference": "print ( ` \u00d0 \u00bf \u00d1 \\ x80 \u00d0 \u00b8 ` . encode ( ` raw_unicode_escape ` ) )",
        "Output": "print ( ` \u00d0 \u00bf \u00d1 \\ x80 \u00d0 \u00b8 ` . encode ( ` UTF8 ` ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "\u00d0\u00bf\u00d1\u0080\u00d0\u00b8",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] en ##code a latin character in string str_0 properly [SEP]",
        "reference": "` ` ` Sopet \u00c3 \u00b3 n ` ` ` . encode ( ` latin - 1 ` ) . decode ( ` utf - 8 ` )",
        "Output": "Sopet \u00c3 \u00b3 n . decode ( ` utf - 8 ` ) . encode ( ` Sopet \u00c3 \u00b3 n ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "Sopet\u00c3\u00b3n",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] res ##ized image var_0 to width , height of str_0 with filter of var_1 [SEP]",
        "reference": "image = image . resize ( ( x , y ) , Image . ANTIALIAS )",
        "Output": "for i in img . hash ( ( 0 , 0 ) ) : ANTIALIAS = Image . open ( image )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "image",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "(x, y)",
                    "quote": "`",
                    "type": "str"
                },
                "var_1": {
                    "value": "ANTIALIAS",
                    "quote": "`",
                    "type": "var"
                },
                "(str_0)": {
                    "value": "(x, y)",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] reg ##ex , find str_0 s only in the middle of string var_0 [SEP]",
        "reference": "re . findall ( ` n ( ? < = [ ^ n ] n ) n + ( ? = [ ^ n ] ) ( ? i ) ` , s )",
        "Output": "re . findall ( ` \\ \\ w ` , s )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "n",
                    "quote": "\"",
                    "type": "str"
                },
                "var_0": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] display the float str_0 as a percentage [SEP]",
        "reference": "print ( ` { 0 : . 0f } % ` . format ( 1 / 3 * 100 ) )",
        "Output": "",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "1/3*100",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list of dictionary var_0 by the key var_1 [SEP]",
        "reference": "mylist . sort ( key = lambda x : x [ ` title ` ] )",
        "Output": "sorted ( mylist , key = lambda x : title . title )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "mylist",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "title",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list var_0 of di ##cts by di ##ct value str_0 [SEP]",
        "reference": "l . sort ( key = lambda x : x [ ` title ` ] )",
        "Output": "sorted ( l , key = lambda x : list ( x . values ( ) ) [ 0 ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "title",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list of di ##ction ##aries by the value of keys str_0 , str_1 , str_2 in ascending order . [SEP]",
        "reference": "l . sort ( key = lambda x : ( x [ ` title ` ] , x [ ` title_url ` ] , x [ ` id ` ] ) )",
        "Output": "l . sort ( key = lambda x : ( list ( x [ ` title ` ] ) , x [ ` title_url ` ] ) , reverse = ` True ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "title",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "title_url",
                    "quote": "'",
                    "type": "str"
                },
                "str_2": {
                    "value": "id",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find 10 largest differences between each respective elements of list var_0 and list var_1 [SEP]",
        "reference": "heapq . nlargest ( 10 , range ( len ( l1 ) ) , key = lambda i : abs ( l1 [ i ] - l2 [ i ] ) )",
        "Output": "[ sum ( l1 [ i : i + 10 ] + l1 [ i : i + 2 ] ) for i in range ( len ( l1 ) - 1 ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l1",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "l2",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] beautiful ##so ##up find all str_0 elements in html string var_0 with class of str_1 [SEP]",
        "reference": "soup . find_all ( ` span ` , { ` class ` : ` star Gry B sp ` } )",
        "Output": "soup . find All ( ` span ` , attrs = { ` star Gry B sp ` : ` star Gry B sp ` } )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "span",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "soup",
                    "quote": "`",
                    "type": "var"
                },
                "str_1": {
                    "value": "starGryB sp",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] write records in data ##frame var_0 to table str_0 in sc ##hema str_1 [SEP]",
        "reference": "df . to_sql ( ` test ` , engine , schema = ` a_schema ` )",
        "Output": "df . to_csv ( ` test ` , sep = ` a_schema ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "test",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "a_schema",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] extract brackets from string var_0 [SEP]",
        "reference": "brackets = re . sub ( ` [ ^ ( ) { } [ \\ \\ ] ] ` , ` ` , s )",
        "Output": "print ( re . findall ( ` \\ \\ d + ` , s ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] remove duplicate elements from list str_0 [SEP]",
        "reference": "list ( dict ( ( x [ 0 ] , x ) for x in L ) . values ( ) )",
        "Output": "[ list ( item ) for item in set ( L ) ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "L",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] read a file var_0 without new ##lines [SEP]",
        "reference": "[ line . rstrip ( ` \\ n ` ) for line in file ]",
        "Output": "print ( open ( ` file ` , ` rb ` ) . read ( ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "file",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the position of item 1 in var_0 [SEP]",
        "reference": "[ i for i , x in enumerate ( testlist ) if x = = 1 ]",
        "Output": "[ i for i , v in enumerate ( testlist ) if i = = 1 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "testlist",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the position of item 1 in var_0 [SEP]",
        "reference": "[ i for i , x in enumerate ( testlist ) if x = = 1 ]",
        "Output": "[ i for i , v in enumerate ( testlist ) if i = = 1 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "testlist",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the position of item 1 in var_0 [SEP]",
        "reference": "for i in [ i for i , x in enumerate ( testlist ) if x = = 1 ] : pass",
        "Output": "[ i for i , v in enumerate ( testlist ) if i = = 1 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "testlist",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the position of item 1 in var_0 [SEP]",
        "reference": "for i in ( i for i , x in enumerate ( testlist ) if x = = 1 ) : pass",
        "Output": "[ i for i , v in enumerate ( testlist ) if i = = 1 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "testlist",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the position of item 1 in var_0 [SEP]",
        "reference": "gen = ( i for i , x in enumerate ( testlist ) if x = = 1 )",
        "Output": "[ i for i , v in enumerate ( testlist ) if i = = 1 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "testlist",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the position of item var_0 in list var_1 [SEP]",
        "reference": "print ( testlist . index ( element ) )",
        "Output": "[ x for x , y in enumerate ( testlist ) if x = = ` element ` ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "element",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "testlist",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the position of item var_0 in list var_1 [SEP]",
        "reference": "try : print ( testlist . index ( element ) ) except Value Error : pass",
        "Output": "[ x for x , y in enumerate ( testlist ) if x = = ` element ` ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "element",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "testlist",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find the first element of the tu ##ple with the maximum second element in a list of tu ##ples var_0 [SEP]",
        "reference": "max ( lis , key = lambda item : item [ 1 ] ) [ 0 ]",
        "Output": "max ( lis , key = lambda x : x [ 0 ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "lis",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the item at index 0 from the tu ##ple that has maximum value at index 1 in list var_0 [SEP]",
        "reference": "max ( lis , key = itemgetter ( 1 ) ) [ 0 ]",
        "Output": "max ( lis , key = lambda x : x [ 1 ] ) [ 1 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "lis",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] make a delay of 1 second [SEP]",
        "reference": "time . sleep ( 1 )",
        "Output": "time . sleep ( 1 )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] convert list of tu ##ples var_0 to a string [SEP]",
        "reference": "` ` ` , ` ` ` . join ( ` ( ` + ` , ` . join ( i ) + ` ) ` for i in L )",
        "Output": "emaillist = ` \\ n ` . join ( item [ 0 ] for item in L )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "L",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] dj ##ango set default value of field var_0 equal to str_0 [SEP]",
        "reference": "b = models . Char Field ( max_length = 7 , default = ` 0000000 ` , editable = False )",
        "Output": "b = models . Foreign Key ( b , default = ` 0000000 ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "b",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "0000000",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort li ##s var_0 in ascending order based on the degrees value of its elements [SEP]",
        "reference": "sorted ( list5 , lambda x : ( degree ( x ) , x ) )",
        "Output": "list5 . sort ( key = lambda x : x . lower ( ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "list5",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort li ##s var_0 in ascending order based on the degrees value of its elements [SEP]",
        "reference": "sorted ( list5 , key = lambda vertex : ( degree ( vertex ) , vertex ) )",
        "Output": "list5 . sort ( key = lambda x : x . lower ( ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "list5",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert a list into a generator object [SEP]",
        "reference": "( n for n in [ 1 , 2 , 3 , 5 ] )",
        "Output": "l = ( i for i in range ( 10 ) )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] remove elements from list var_0 that have an index number mentioned in list var_1 [SEP]",
        "reference": "newlist = [ v for i , v in enumerate ( oldlist ) if i not in removelist ]",
        "Output": "[ i for i , j in enumerate ( oldlist ) if i = = 1 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "oldlist",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "removelist",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] open a file str_0 in write mode [SEP]",
        "reference": "f = open ( ` yourfile . txt ` , ` w ` )",
        "Output": "with open ( ` yourfile . txt ` , ` wb ` ) as f : stream . write ( ` yourfile . txt ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "yourfile.txt",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get attribute str_0 from object var_0 [SEP]",
        "reference": "getattr ( obj , ` attr ` )",
        "Output": "getattr ( obj , ` attr ` , ` find_all ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "attr",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "obj",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert tu ##ple of tu ##ples str_0 to tu ##ple [SEP]",
        "reference": "from functools import reduce",
        "Output": "tuple ( ( ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "(('aa',), ('bb',), ('cc',))",
                    "quote": "`",
                    "type": "str"
                },
                "(str_0)": {
                    "value": "(('aa',), ('bb',), ('cc',))",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert tu ##ple of tu ##ples str_0 to list in one line [SEP]",
        "reference": "map ( lambda a : a [ 0 ] , ( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) )",
        "Output": "[ list ( t ) for t in zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "(('aa',), ('bb',), ('cc',))",
                    "quote": "`",
                    "type": "str"
                },
                "(str_0)": {
                    "value": "(('aa',), ('bb',), ('cc',))",
                    "quote": "`",
                    "type": "str"
                },
                "((str_0))": {
                    "value": "(('aa',), ('bb',), ('cc',))",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert tu ##ple of tu ##ples str_0 to list in one line [SEP]",
        "reference": "df [ ` range ` ] . replace ( ` , ` , ` - ` , inplace = True )",
        "Output": "[ list ( t ) for t in zip ( * [ ( 1 , 2 ) , ( 3 , 4 ) , ( 5 , 6 ) ] ) ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "(('aa',), ('bb',), ('cc',))",
                    "quote": "`",
                    "type": "str"
                },
                "(str_0)": {
                    "value": "(('aa',), ('bb',), ('cc',))",
                    "quote": "`",
                    "type": "str"
                },
                "((str_0))": {
                    "value": "(('aa',), ('bb',), ('cc',))",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] un ##zi ##p the list str_0 [SEP]",
        "reference": "zip ( * [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] )",
        "Output": "zip ( * [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]",
                    "quote": "`",
                    "type": "str"
                },
                "[str_0]": {
                    "value": "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] un ##zi ##p the list str_0 [SEP]",
        "reference": "zip ( * [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] )",
        "Output": "zip ( * [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]",
                    "quote": "`",
                    "type": "str"
                },
                "[str_0]": {
                    "value": "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] un ##zi ##p list var_0 [SEP]",
        "reference": "result = [ a for a , b in original ] , [ b for a , b in original ]",
        "Output": "original = [ list ( zip ( x , original ) ) for x , y in zip ( original , original [ 1 : ] ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "original",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] un ##zi ##p list var_0 and return a generator [SEP]",
        "reference": "result = ( a for a , b in original ) , ( b for a , b in original )",
        "Output": "list ( zip ( original , original [ 1 : ] ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "original",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] un ##zi ##p list str_0 [SEP]",
        "reference": "zip ( * [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] )",
        "Output": "zip ( * [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]",
                    "quote": "`",
                    "type": "str"
                },
                "[str_0]": {
                    "value": "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] un ##zi ##p list str_0 and fill empty results with none [SEP]",
        "reference": "map ( None , * [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] )",
        "Output": "list ( zip ( [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] , [ x for x in [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] if not x is not None ] ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]",
                    "quote": "`",
                    "type": "str"
                },
                "[str_0]": {
                    "value": "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] en ##code str_0 to a j ##son string [SEP]",
        "reference": "json . dumps ( Decimal ( 3 ) )",
        "Output": "print ( json . dumps ( data ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "Decimal('3.9')",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] add key str_0 to dictionary var_0 with value str_1 [SEP]",
        "reference": "d [ ` mynewkey ` ] = ` mynewvalue `",
        "Output": "d . update ( [ mynewkey ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "mynewkey",
                    "quote": "\"",
                    "type": "str"
                },
                "var_0": {
                    "value": "d",
                    "quote": "`",
                    "type": "var"
                },
                "str_1": {
                    "value": "mynewvalue",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] add key str_0 to dictionary var_0 with value 1 [SEP]",
        "reference": "data . update ( { ` a ` : 1 } )",
        "Output": "data = dict ( ( k , v ) for k , v in list ( data . items ( ) ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "a",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "data",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] add key str_0 to dictionary var_0 with value 1 [SEP]",
        "reference": "data . update ( dict ( a = 1 ) )",
        "Output": "data = dict ( ( k , v ) for k , v in list ( data . items ( ) ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "a",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "data",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] add key str_0 to dictionary var_0 with value 1 [SEP]",
        "reference": "data . update ( a = 1 )",
        "Output": "data = dict ( ( k , v ) for k , v in list ( data . items ( ) ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "a",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "data",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find maximal value in matrix var_0 [SEP]",
        "reference": "max ( [ max ( i ) for i in matrix ] )",
        "Output": "max ( matrix , key = lambda x : np . max ( matrix , axis = 1 ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "matrix",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] round number var_0 to 2 precision after the decimal point [SEP]",
        "reference": "answer = str ( round ( answer , 2 ) )",
        "Output": "round ( answer , 2 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "answer",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] extract ip address from an html string [SEP]",
        "reference": "ip = re . findall ( ` [ 0 - 9 ] + ( ? : \\ \\ . [ 0 - 9 ] + ) { 3 } ` , s )",
        "Output": "ip = urllib . request . urlopen ( url ) . read ( )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] filter data ##frame var_0 by values in column var_1 that appear more than once [SEP]",
        "reference": "df . groupby ( ` A ` ) . filter ( lambda x : len ( x ) > 1 )",
        "Output": "df [ df . groupby ( ` A ` ) [ ` A ` ] . value_counts ( ) = = 2 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "A",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] app ##end each line in file var_0 into a list [SEP]",
        "reference": "[ x for x in myfile . splitlines ( ) if x ! = ` ` ]",
        "Output": "l = [ line . rstrip ( ` . ` ) . split ( ` , ` ) for line in myfile ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "myfile",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get a list of integers var_0 from a file str_0 [SEP]",
        "reference": "lst = map ( int , open ( ` filename . txt ` ) . readlines ( ) )",
        "Output": "lst = [ [ int ( x ) for x in line . split ( ) ] for line in f ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "lst",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "filename.txt",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] add color bar with image var_0 to plot var_1 [SEP]",
        "reference": "plt . colorbar ( mappable = mappable , cax = ax3 )",
        "Output": "plt = pylab . scatter ( mappable , plt , marker = ` o ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "mappable",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "plt",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] count most frequent 100 words in column str_0 of data ##frame var_0 [SEP]",
        "reference": "Counter ( ` ` . join ( df [ ` text ` ] ) . split ( ) ) . most_common ( 100 )",
        "Output": "df . value_counts ( ) . groupby ( ` text ` ) . first ( ) . first ( ) . sum ( )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "text",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] count most frequent 100 words in column str_0 of data ##frame var_0 [SEP]",
        "reference": "re . findall ( ` ( . + ? ) : ( . + ? ) \\ \\ b ? ` , text )",
        "Output": "df . value_counts ( ) . groupby ( ` text ` ) . first ( ) . first ( ) . sum ( )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "text",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] generate all 2 - element subset ##s of tu ##ple str_0 [SEP]",
        "reference": "list ( itertools . combinations ( ( 1 , 2 , 3 ) , 2 ) )",
        "Output": "list ( itertools . combinations ( ( 1 , 2 , 3 ) , 2 ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "(1, 2, 3)",
                    "quote": "`",
                    "type": "str"
                },
                "(str_0)": {
                    "value": "(1, 2, 3)",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get a value of date ##time . today ( ) in the utc time zone [SEP]",
        "reference": "datetime . now ( pytz . utc )",
        "Output": "today = datetime . datetime . utcnow ( ) . date ( )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] get a new list var_0 by removing empty list from a list of lists var_1 [SEP]",
        "reference": "list2 = [ x for x in list1 if x ! = [ ] ]",
        "Output": "list2 = [ item for sublist in list1 for item in sublist ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "list2",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "list1",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create var_0 to contain the lists from list var_1 excluding the empty lists from var_1 [SEP]",
        "reference": "list2 = [ x for x in list1 if x ]",
        "Output": "[ x for x in list1 if x not in list1 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "list2",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "list1",
                    "quote": "`",
                    "type": "var"
                },
                "var_2": {
                    "value": "list1",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] dj ##ango response with j ##son var_0 [SEP]",
        "reference": "return Http Response ( data , mimetype = ` application / json ` )",
        "Output": "return Http Response ( json . dumps ( data ) , content_type = ` application / json ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "data",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get all text that is not enclosed within square brackets in string var_0 [SEP]",
        "reference": "re . findall ( ` ( . * ? ) \\ \\ [ . * ? \\ \\ ] ` , example_str )",
        "Output": "example_str = re . sub ( ` \\ \\ ( + as . * ? \\ \\ ) ` , ` ` , example_str )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "example_str",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] use a reg ##ex to get all text in a string var_0 that is not surrounded by square brackets [SEP]",
        "reference": "re . findall ( ` ( . * ? ) ( ? : \\ \\ [ . * ? \\ \\ ] | $ ) ` , example_str )",
        "Output": "example_str = re . findall ( ` \\ \\ 1 \\ \\ 2 ` , example_str )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "example_str",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get whatever is between parentheses as a single match , and any char outside as an individual match in string str_0 [SEP]",
        "reference": "re . findall ( ` \\ \\ ( . + ? \\ \\ ) | \\ \\ w ` , ` ( zyx ) bc ` )",
        "Output": "re . findall ( ` ( ? < = . ) ( ? = . ) ` , ` ( zyx ) bc ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "(zyx)bc",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] match reg ##ex str_0 with string str_1 [SEP]",
        "reference": "re . findall ( ` \\ \\ ( ( . * ? ) \\ \\ ) | ( \\ \\ w ) ` , ` ( zyx ) bc ` )",
        "Output": "print ( re . match ( ` \\ \\ ( ( . * ? ) \\ \\ ) | ( \\ \\ w ) ` , ` ( zyx ) bc ` ) . group ( 1 ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "\\((.*?)\\)|(\\w)",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "(zyx)bc",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] match multiple reg ##ex patterns with the alter ##nation operator str_0 in a string str_1 [SEP]",
        "reference": "re . findall ( ` \\ \\ ( . * ? \\ \\ ) | \\ \\ w ` , ` ( zyx ) bc ` )",
        "Output": "re . findall ( ` | ` , ` ( zyx ) bc ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "|",
                    "quote": "`",
                    "type": "str"
                },
                "str_1": {
                    "value": "(zyx)bc",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] format ##e each string ci ##n list var_0 into pattern str_0 [SEP]",
        "reference": "elements = [ ` % { 0 } % ` . format ( element ) for element in elements ]",
        "Output": "elements = [ ` % { 0 } % ` . format ( i , ` % { 0 } % ` ) for i in range ( n ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "elements",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "%{0}%",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] open a background process str_0 with arguments str_1 [SEP]",
        "reference": "subprocess . Popen ( [ ` background - process ` , ` arguments ` ] )",
        "Output": "subprocess . Popen ( ` background - process ` , shell = ` True ` , stdout = arguments )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "background-process",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "arguments",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get list of values from dictionary str_0 w . r . t . list of keys str_1 [SEP]",
        "reference": "[ mydict [ x ] for x in mykeys ]",
        "Output": "[ k for k , v in list ( mydict . items ( ) ) if ` mykeys ` in k ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "mydict",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "mykeys",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert list str_0 into a dictionary [SEP]",
        "reference": "dict ( [ ( ` Name ` , ` Joe ` ) , ( ` Age ` , 22 ) ] )",
        "Output": "dict ( zip ( [ ( ` Name ` , ` Joe ` ) , ( ` Age ` , 22 ) ] , [ ( ` Name ` , ` Joe ` ) , ( ` Age ` , 22 ) ] ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "[('Name', 'Joe'), ('Age', 22)]",
                    "quote": "`",
                    "type": "str"
                },
                "[str_0]": {
                    "value": "[('Name', 'Joe'), ('Age', 22)]",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] average each two columns of array var_0 [SEP]",
        "reference": "data . reshape ( - 1 , j ) . mean ( axis = 1 ) . reshape ( data . shape [ 0 ] , - 1 )",
        "Output": "np . mean ( data , axis = 0 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "data",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] double backs ##lash escape all double quotes in string var_0 [SEP]",
        "reference": "print ( s . encode ( ` unicode - escape ` ) . replace ( ` ` ` , ` \\ \\ ` ` ) )",
        "Output": "s . replace ( ` \\ \\ ` , ` \\ \\ ` ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split a string into a list of words and whites ##pace [SEP]",
        "reference": "re . split ( ` ( \\ \\ W + ) ` , s )",
        "Output": "[ match . group ( 0 ) for match in words . splitlines ( ) ]",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] split a string into a list of words and whites ##pace [SEP]",
        "reference": "df . plot ( kind = ` barh ` , stacked = True )",
        "Output": "[ match . group ( 0 ) for match in words . splitlines ( ) ]",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] reverse the keys and values in a dictionary var_0 [SEP]",
        "reference": "{ i [ 1 ] : i [ 0 ] for i in list ( my Dictionary . items ( ) ) }",
        "Output": "dict ( ( v , k ) for k , v in my Dictionary . items ( ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "myDictionary",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] finding the index of elements containing sub ##st ##ring str_0 and str_1 in a list of strings str_2 . [SEP]",
        "reference": "[ i for i , j in enumerate ( my List ) if ` how ` in j . lower ( ) or ` what ` in j . lower ( ) ]",
        "Output": "[ i for i , j in enumerate ( my List ) if ` how ` in r ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "how",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "what",
                    "quote": "'",
                    "type": "str"
                },
                "str_2": {
                    "value": "myList",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] check if object var_0 is a string [SEP]",
        "reference": "isinstance ( obj , str )",
        "Output": "isinstance ( obj , str )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "obj",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] check if object var_0 is a string [SEP]",
        "reference": "isinstance ( o , str )",
        "Output": "isinstance ( o , str )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "o",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] check if object var_0 is a string [SEP]",
        "reference": "type ( o ) is str",
        "Output": "isinstance ( o , str )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "o",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] check if object var_0 is a string [SEP]",
        "reference": "isinstance ( o , str )",
        "Output": "isinstance ( o , str )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "o",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] check if var_0 is a string [SEP]",
        "reference": "isinstance ( obj_to_test , str )",
        "Output": "if __name__ in ` obj_to_test ` : obj_to_test . isdigit ( )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "obj_to_test",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] app ##end list var_0 to var_1 [SEP]",
        "reference": "list2 . extend ( list1 )",
        "Output": "list2 . append ( list1 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "list1",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "list2",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] app ##end list var_0 to var_1 [SEP]",
        "reference": "list1 . extend ( mylog )",
        "Output": "list1 . append ( mylog )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "mylog",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "list1",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] app ##end list var_0 to var_1 [SEP]",
        "reference": "c . extend ( a )",
        "Output": "c . append ( a )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "c",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] app ##end items in list var_0 to var_1 [SEP]",
        "reference": "for line in mylog : list1 . append ( line )",
        "Output": "list1 . append ( mylog )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "mylog",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "list1",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] app ##end a tu ##ple of elements from list var_0 with index ##es str_0 to list var_1 [SEP]",
        "reference": "b . append ( ( a [ 0 ] [ 0 ] , a [ 0 ] [ 2 ] ) )",
        "Output": "[ tuple ( j ) for i , j in zip ( a , b ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "[0][0] [0][2]",
                    "quote": "'",
                    "type": "str"
                },
                "var_1": {
                    "value": "b",
                    "quote": "`",
                    "type": "var"
                },
                "[str_0]": {
                    "value": "[0][0] [0][2]",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] initial ##ize var_0 in fl ##ask con ##fi ##g with str_0 [SEP]",
        "reference": "app . config [ ` SECRET_KEY ` ] = ` Your_secret_string `",
        "Output": "SECRET_KEY = json . loads ( app )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "SECRET_KEY",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "Your_secret_string",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] un ##pack a series of tu ##ples in panda ##s into a data ##frame with column names str_0 and str_1 [SEP]",
        "reference": "pd . Data Frame ( out . tolist ( ) , columns = [ ` out - 1 ` , ` out - 2 ` ] , index = out . index )",
        "Output": "df = pd . concat ( [ out - 1 ] , axis = 1 )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "out-1",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "out-2",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find the index of an element str_0 in a list var_0 [SEP]",
        "reference": "[ x for x in range ( len ( stocks_list ) ) if stocks_list [ x ] = = ` MSFT ` ]",
        "Output": "[ i for i , el in enumerate ( stocks_list ) if el = = ` MSFT ` ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "MSFT",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "stocks_list",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] rotate the x ##tick labels of mat ##pl ##ot ##lib plot var_0 by str_0 degrees to make long labels read ##able [SEP]",
        "reference": "ax . set_xticklabels ( labels , rotation = 45 )",
        "Output": "ax . set_xticklabels ( ax . xaxis . get_majorticklabels ( ) , rotation = 0 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "ax",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "45",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] remove symbols from a string var_0 [SEP]",
        "reference": "re . sub ( ` [ ^ \\ \\ w ] ` , ` ` , s )",
        "Output": "s = ` ` . join ( c for c in s if c not in ` ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the current directory of a script [SEP]",
        "reference": "os . path . basename ( os . path . dirname ( os . path . realpath ( __file__ ) ) )",
        "Output": "os . path . dirname ( os . path . abspath ( __file__ ) )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] find oct ##al characters matches from a string var_0 using reg ##ex [SEP]",
        "reference": "print ( re . findall ( ` \\ \\ [ 0 - 7 ] { 1 , 3 } ` , str ) )",
        "Output": "re . findall ( ` ( ? = ( \\ \\ w \\ \\ w ) ) ` , ` str ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "str",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split string var_0 based on occurrences of reg ##ex pattern str_0 [SEP]",
        "reference": "re . split ( ` [ ] ( ? = [ A - Z ] + \\ \\ b ) ` , input )",
        "Output": "re . split ( ` [ ] ( ? = [ A - Z ] + \\ \\ b ) ` , input )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "input",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "[ ](?=[A-Z]+\\b)",
                    "quote": "'",
                    "type": "str"
                },
                "[str_0)": {
                    "value": "[ ](?=[A-Z]+\\b)",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split string var_0 at every space followed by an upper - case letter [SEP]",
        "reference": "re . split ( ` [ ] ( ? = [ A - Z ] ) ` , input )",
        "Output": "re . split ( ` itemgetter ` , input )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "input",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] send multi ##par ##t encoded file var_0 to ur ##l var_1 with header ##s var_2 and metadata var_3 [SEP]",
        "reference": "r = requests . post ( url , files = files , headers = headers , data = data )",
        "Output": "url = urllib . request . urlopen ( files ) . read ( )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "files",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "url",
                    "quote": "`",
                    "type": "var"
                },
                "var_2": {
                    "value": "headers",
                    "quote": "`",
                    "type": "var"
                },
                "var_3": {
                    "value": "data",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] write bytes var_0 to a file var_1 in python 3 [SEP]",
        "reference": "open ( ` filename ` , ` wb ` ) . write ( bytes_ )",
        "Output": "filename . write ( list ( range ( bytes_ , filename + 1 ) ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "bytes_",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "filename",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get a list from a list var_0 with values mapped into a dictionary var_1 [SEP]",
        "reference": "[ dct [ k ] for k in lst ]",
        "Output": "dct = list ( map ( dct , lst ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "lst",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "dct",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find duplicate names in column str_0 of the data ##frame var_0 [SEP]",
        "reference": "x . set_index ( ` name ` ) . index . get_duplicates ( )",
        "Output": "x . groupby ( [ ` name ` ] ) . size ( ) . reset_index ( drop = ` True ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "name",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "x",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] tr ##un ##cate float 1 . 92 ##33 ##28 ##43 ##7 ##45 ##2 to 3 decimal places [SEP]",
        "reference": "round ( 1 , 3 )",
        "Output": "` ` ` ` ` ` . join ( str ( i ) for i in range ( 3 ) if j % 3 = = 3 )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] sort list var_0 in descending order based on the date value in second element of each list in list var_0 [SEP]",
        "reference": "sorted ( li , key = lambda x : datetime . strptime ( x [ 1 ] , ` % d / % m / % Y ` ) , reverse = True )",
        "Output": "sorted ( li , key = lambda x : x [ 1 ] , reverse = ` True ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "li",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "li",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] place the radial tick ##s in plot var_0 at 135 degrees [SEP]",
        "reference": "ax . set_rlabel_position ( 135 )",
        "Output": "ax . plot ( x , y )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "ax",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] check if path var_0 is an absolute path [SEP]",
        "reference": "os . path . isabs ( my_path )",
        "Output": "os . path . abspath ( my_path )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "my_path",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get number of keys in dictionary var_0 [SEP]",
        "reference": "len ( list ( yourdict . keys ( ) ) )",
        "Output": "sum ( len ( v ) for v in yourdict )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "yourdict",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] count the number of keys in dictionary var_0 [SEP]",
        "reference": "len ( set ( open ( yourdictfile ) . read ( ) . split ( ) ) )",
        "Output": "sum ( len ( v ) for v in yourdictfile )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "yourdictfile",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] panda ##s data ##frame get first row of each group by str_0 [SEP]",
        "reference": "df . groupby ( ` id ` ) . first ( )",
        "Output": "df . loc [ df . index [ 0 ] , ` id ` ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "id",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split a list in first column into multiple columns keeping other columns as well in panda ##s data frame [SEP]",
        "reference": "pd . concat ( [ df [ 0 ] . apply ( pd . Series ) , df [ 1 ] ] , axis = 1 )",
        "Output": "df = pd . concat ( [ df , df2 ] , axis = 1 )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] extract attributes str_0 from string var_0 [SEP]",
        "reference": "re . findall ( ` src = ` js / ( [ ^ ` ] * \\ \\ bjquery \\ \\ b [ ^ ` ] * ) ` ` , data )",
        "Output": "data = data . split ( ` src = ` js / ( [ ^ ` ] * \\ \\ bjquery \\ \\ b [ ^ ` ] * ) ` ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "src=\"js/([^\"]*\\bjquery\\b[^\"]*)\"",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "data",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sum integers contained in strings in list str_0 [SEP]",
        "reference": "sum ( int ( float ( item ) ) for item in [ _f for _f in [ ` ` , ` 3 . 4 ` , ` ` , ` ` , ` 1 . 0 ` ] if _f ] )",
        "Output": "sum ( int ( x ) for x in [ ` ` , ` 3 . 4 ` , ` ` , ` ` , ` 1 . 0 ` ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "['', '3.4', '', '', '1.0']",
                    "quote": "`",
                    "type": "str"
                },
                "[str_0]": {
                    "value": "['', '3.4', '', '', '1.0']",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] call a sub ##pro ##ces ##s with arguments str_0 that may contain spaces [SEP]",
        "reference": "subprocess . Popen ( [ ` c : \\ \\ Program Files \\ \\ VMware \\ \\ VMware Server \\ \\ vmware - cmd . bat ` ] )",
        "Output": "subprocess . Popen ( [ c : \\ Program Files \\ VMware \\ VMware Server \\ vmware - cmd . bat ] , stdout = subprocess . PIPE , stderr = subprocess . PIPE ) . communicate ( )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] reverse a priority queue var_0 in python without using classes [SEP]",
        "reference": "q . put ( ( - n , n ) )",
        "Output": "print ( q . shape [ - 1 ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "q",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] make a bar ##pl ##ot of data in column var_0 of data ##frame var_1 colour - coded according to list var_2 [SEP]",
        "reference": "df [ ` group ` ] . plot ( kind = ` bar ` , color = [ ` r ` , ` g ` , ` b ` , ` r ` , ` g ` , ` b ` , ` r ` ] )",
        "Output": "pd . Data Frame ( list ( range ( len ( df ) ) , columns = color ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "group",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                },
                "var_2": {
                    "value": "color",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find all matches of reg ##ex pattern str_0 in string var_0 [SEP]",
        "reference": "re . findall ( ` ( [ a - f A - F \\ \\ d ] { 32 } ) ` , data )",
        "Output": "re . findall ( ` ( [ a - f A - F \\ \\ d ] { 32 } ) ` , data )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "([a-fA-F\\d]{32})",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "data",
                    "quote": "`",
                    "type": "var"
                },
                "(str_0)": {
                    "value": "([a-fA-F\\d]{32})",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the length of list var_0 [SEP]",
        "reference": "len ( my_list )",
        "Output": "len ( my_list )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "my_list",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] getting the length of array var_0 [SEP]",
        "reference": "len ( l )",
        "Output": "l . reshape ( - 1 , l [ i ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] getting the length of array var_0 [SEP]",
        "reference": "len ( s )",
        "Output": "s . reshape ( - 1 , s [ i ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] getting the length of var_0 [SEP]",
        "reference": "len ( my_tuple )",
        "Output": "len ( my_tuple )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "my_tuple",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] getting the length of var_0 [SEP]",
        "reference": "len ( my_string )",
        "Output": "len ( my_string )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "my_string",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] remove escape character from string str_0 [SEP]",
        "reference": "` ` ` \\ \\ a ` ` ` . decode ( ` string_escape ` )",
        "Output": "\\ a . replace ( ` \\ \\ xc3 \\ \\ x85 \u3042 ` , ` ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "\\a",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] replace each str_0 with str_1 and each str_1 with str_0 in the string str_4 in a single pass . [SEP]",
        "reference": "` ` ` obama ` ` ` . replace ( ` a ` , ` % temp % ` ) . replace ( ` b ` , ` a ` ) . replace ( ` % temp % ` , ` b ` )",
        "Output": "obama = ` obama ` . join ( obama )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "a",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "b",
                    "quote": "'",
                    "type": "str"
                },
                "str_2": {
                    "value": "b",
                    "quote": "'",
                    "type": "str"
                },
                "str_3": {
                    "value": "a",
                    "quote": "'",
                    "type": "str"
                },
                "str_4": {
                    "value": "obama",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] remove directory tree str_0 [SEP]",
        "reference": "shutil . rmtree ( ` / folder_name ` )",
        "Output": "os . remove ( ` / folder_name ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "/folder_name",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create a new column var_0 in panda ##s data frame var_1 based on the values in column var_2 [SEP]",
        "reference": "data [ ` weekday ` ] = data [ ` my_dt ` ] . apply ( lambda x : x . weekday ( ) )",
        "Output": "data [ ` weekday ` ] = data [ ` my_dt ` ] . apply ( lambda x : x [ ` weekday ` ] , axis = 1 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "weekday",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "data",
                    "quote": "`",
                    "type": "var"
                },
                "var_2": {
                    "value": "my_dt",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] reverse sort counter var_0 by values [SEP]",
        "reference": "sorted ( x , key = x . get , reverse = True )",
        "Output": "sorted ( list ( x . items ( ) ) , key = lambda x : x [ 1 ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "x",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] reverse sort counter var_0 by value [SEP]",
        "reference": "sorted ( list ( x . items ( ) ) , key = lambda pair : pair [ 1 ] , reverse = True )",
        "Output": "sorted ( list ( x . items ( ) ) , key = lambda x : x [ 1 ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "x",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] app ##end a nu ##mp ##y array str_0 to a nu ##mp ##y array str_1 [SEP]",
        "reference": "np . vstack ( ( a , b ) )",
        "Output": "a = numpy . array ( [ b , a ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "b",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "a",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] nu ##mp ##y con ##cate ##nate two arrays var_0 and var_1 along the first axis [SEP]",
        "reference": "print ( concatenate ( ( a , b ) , axis = 0 ) )",
        "Output": "a = numpy . vstack ( ( a , b ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "b",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] nu ##mp ##y con ##cate ##nate two arrays var_0 and var_1 along the second axis [SEP]",
        "reference": "print ( concatenate ( ( a , b ) , axis = 1 ) )",
        "Output": "a = numpy . vstack ( ( a , b ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "b",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] nu ##mp ##y con ##cate ##nate two arrays var_0 and var_1 along the first axis [SEP]",
        "reference": "c = np . r_ [ a [ ( None ) , : ] , b [ ( None ) , : ] ]",
        "Output": "a = numpy . vstack ( ( a , b ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "b",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] nu ##mp ##y con ##cate ##nate two arrays var_0 and var_1 along the first axis [SEP]",
        "reference": "np . array ( ( a , b ) )",
        "Output": "a = numpy . vstack ( ( a , b ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "b",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] fetch address information for host str_0 ion port 80 [SEP]",
        "reference": "print ( socket . getaddrinfo ( ` google . com ` , 80 ) )",
        "Output": "print ( 80 )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "google.com",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] add a column str_0 with value str_1 to data ##frame var_0 [SEP]",
        "reference": "df . xs ( ` sat ` , level = ` day ` , drop_level = False )",
        "Output": "df [ ` sat ` ] = df [ ` sat ` ] . astype ( sat )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "day",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "sat",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] return a 401 unauthorized in dj ##ango [SEP]",
        "reference": "return Http Response ( ` Unauthorized ` , status = 401 )",
        "Output": "sys . path . extend ( os . path . abspath ( __file__ ) )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] fl ##ask set folder str_0 as the default template folder [SEP]",
        "reference": "Flask ( __name__ , template_folder = ` wherever ` )",
        "Output": "sys . path . append ( ` wherever ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "wherever",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] how do i insert into t ##1 ( select * from t ##2 ) in sql ##al ##che ##my ? [SEP]",
        "reference": "session . execute ( ` INSERT INTO t1 ( SELECT * FROM t2 ) ` )",
        "Output": "session . commit ( )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] sort a list of lists str_0 such that third row comes first [SEP]",
        "reference": "c2 . sort ( key = lambda row : row [ 2 ] )",
        "Output": "sorted ( c2 , key = lambda x : x [ 1 ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "c2",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list of lists str_0 such that third row comes first [SEP]",
        "reference": "c2 . sort ( key = lambda row : ( row [ 2 ] , row [ 1 ] , row [ 0 ] ) )",
        "Output": "sorted ( c2 , key = lambda x : x [ 1 ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "c2",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list of lists str_0 such that third row comes first [SEP]",
        "reference": "c2 . sort ( key = lambda row : ( row [ 2 ] , row [ 1 ] ) )",
        "Output": "sorted ( c2 , key = lambda x : x [ 1 ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "c2",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] set font var_0 to display non - as ##ci ##i characters in mat ##pl ##ot ##lib [SEP]",
        "reference": "matplotlib . rc ( ` font ` , * * { ` sans - serif ` : ` Arial ` , ` family ` : ` sans - serif ` } )",
        "Output": "Arial . decode ( ` utf - 8 ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "Arial",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert date ##time column str_0 of panda ##s data ##frame str_1 to or ##dina ##l [SEP]",
        "reference": "df [ ` date ` ] . apply ( lambda x : x . toordinal ( ) )",
        "Output": "df [ ` df ` ] = df [ ` df ` ] + df [ ` df ` ] . astype ( str )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "date",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "df",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get html source of se ##len ##ium web ##ele ##ment var_0 [SEP]",
        "reference": "element . get_attribute ( ` inner HTML ` )",
        "Output": "element . get ( ` href ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "element",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the integer location of a key var_0 in a panda ##s data frame [SEP]",
        "reference": "df . index . get_loc ( ` bob ` )",
        "Output": "df [ ` bob ` ] [ ` bob ` ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "bob",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] open a str_0 terminal from python script and run str_1 command . [SEP]",
        "reference": "os . system ( ` gnome - terminal - e \\ ` bash - c ` sudo apt - get update ; exec bash ` \\ ` ` )",
        "Output": "os . system ( ` sudo apt - get update ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "gnome",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "sudo apt-get update",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] add an item with key str_0 and value 1 to an dictionary var_0 [SEP]",
        "reference": "my_dict . update ( { ` third_key ` : 1 } )",
        "Output": "my_dict = dict ( ( k , my_dict [ k ] ) for k in my_dict )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "third_key",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "my_dict",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] declare an array [SEP]",
        "reference": "my_list = [ ]",
        "Output": "a = [ 0 ] * 2",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] insert item str_0 to a list var_0 [SEP]",
        "reference": "my_list . append ( 12 )",
        "Output": "my_list . insert ( 3 , ` 12 ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "12",
                    "quote": "`",
                    "type": "str"
                },
                "var_0": {
                    "value": "my_list",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] add an entry str_0 at the beginning of list var_0 [SEP]",
        "reference": "my List . insert ( 0 , ` wuggah ` )",
        "Output": "my List . insert ( 0 , ` wuggah ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "wuggah",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "myList",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert a he ##x - string representation to actual bytes [SEP]",
        "reference": "` ` ` \\ \\ x F3 \\ \\ x BE \\ \\ x80 \\ \\ x80 ` ` ` . replace ( ` \\ \\ x ` , ` ` ) . decode ( ` hex ` )",
        "Output": "` ` ` ` ` ` . join ( chr ( ord ( c ) ) for c in s . decode ( ` hex ` ) ) . decode ( ` hex ` )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] select the last column of data ##frame var_0 [SEP]",
        "reference": "df [ df . columns [ - 1 ] ]",
        "Output": "df . ix [ : , ( - 1 ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the first value from data ##frame var_0 where column str_0 is equal to str_1 [SEP]",
        "reference": "df . loc [ df [ ` Letters ` ] = = ` C ` , ` Letters ` ] . values [ 0 ]",
        "Output": "df [ df . groupby ( ` Letters ` ) [ ` C ` ] . transform ( ` C ` ) = = 1 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "Letters",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "C",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] converting two lists str_0 and str_1 into a matrix [SEP]",
        "reference": "np . column_stack ( ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) )",
        "Output": "map ( list , zip ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "[1, 2, 3]",
                    "quote": "`",
                    "type": "str"
                },
                "str_1": {
                    "value": "[4, 5, 6]",
                    "quote": "`",
                    "type": "str"
                },
                "[str_0]": {
                    "value": "[1, 2, 3]",
                    "quote": "`",
                    "type": "str"
                },
                "[str_1]": {
                    "value": "[4, 5, 6]",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the type of var_0 [SEP]",
        "reference": "type ( i )",
        "Output": "isinstance ( i , str )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "i",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] determine the type of variable var_0 [SEP]",
        "reference": "type ( v )",
        "Output": "isinstance ( v , str )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "v",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] determine the type of variable var_0 [SEP]",
        "reference": "type ( v )",
        "Output": "isinstance ( v , str )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "v",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] determine the type of variable var_0 [SEP]",
        "reference": "type ( v )",
        "Output": "isinstance ( v , str )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "v",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] determine the type of variable var_0 [SEP]",
        "reference": "type ( v )",
        "Output": "isinstance ( v , str )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "v",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the type of variable var_0 [SEP]",
        "reference": "print ( type ( variable_name ) )",
        "Output": "type ( variable_name )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "variable_name",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the 5th item of a generator [SEP]",
        "reference": "next ( itertools . islice ( range ( 10 ) , 5 , 5 + 1 ) )",
        "Output": "print ( x [ 4 ] )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] print a string var_0 with string format [SEP]",
        "reference": "print ( ` { } ` . format ( word ) )",
        "Output": "print ( ` I have : { 0 . price } ` . format ( word ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "word",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] join a list of strings var_0 using a space str_0 [SEP]",
        "reference": "` ` ` ` ` ` . join ( list )",
        "Output": "` ` ` ` ` ` . join ( [ ` ` . join ( x ) for x in list ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "list",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create list var_0 containing two empty lists [SEP]",
        "reference": "y = [ [ ] for n in range ( 2 ) ]",
        "Output": "y = [ [ ] for i in range ( 2 ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "y",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] read a file str_0 into a list var_0 [SEP]",
        "reference": "data = [ line . strip ( ) for line in open ( ` C : / name / My Documents / numbers ` , ` r ` ) ]",
        "Output": "data = [ line . rstrip ( ` \\ n ` ) for line in open ( ` C : / name / My Documents / numbers ` ) ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "C:/name/MyDocuments/numbers",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "data",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] del ##ete all occurrences of character str_0 in string str_1 [SEP]",
        "reference": "` ` ` ` ` ` . join ( [ char for char in ` it is icy ` if char ! = ` i ` ] )",
        "Output": "` ` ` it is icy ` ` ` . replace ( ` i ` , ` ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "i",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "it is icy",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] del ##ete all instances of a character str_0 in a string str_1 [SEP]",
        "reference": "re . sub ( ` i ` , ` ` , ` it is icy ` )",
        "Output": "newstr = ` it is icy ` . replace ( ` i ` , ` ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "i",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "it is icy",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] del ##ete all characters str_0 in string str_1 [SEP]",
        "reference": "` ` ` it is icy ` ` ` . replace ( ` i ` , ` ` )",
        "Output": "` ` ` it is icy ` ` ` . replace ( ` i ` , ` ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "i",
                    "quote": "\"",
                    "type": "str"
                },
                "str_1": {
                    "value": "it is icy",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] del ##ete all characters str_0 in string str_1 [SEP]",
        "reference": "` ` ` ` ` ` . join ( [ char for char in ` it is icy ` if char ! = ` i ` ] )",
        "Output": "` ` ` it is icy ` ` ` . replace ( ` i ` , ` ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "i",
                    "quote": "\"",
                    "type": "str"
                },
                "str_1": {
                    "value": "it is icy",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] drop rows of panda ##s data ##frame var_0 having nan in column at index str_0 [SEP]",
        "reference": "df . dropna ( subset = [ 1 ] )",
        "Output": "df . loc [ df . index . isin ( [ ` 1 ` , ` 1 ` ] ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "1",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get elements from list var_0 , that have a field var_1 value 30 [SEP]",
        "reference": "[ x for x in my List if x . n = = 30 ]",
        "Output": "[ x for x in my List if x [ 30 ] = = 30 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "myList",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "n",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] converting list of strings var_0 to list of integer var_1 [SEP]",
        "reference": "nums = [ int ( x ) for x in intstringlist ]",
        "Output": "nums = [ int ( i ) for i in intstringlist ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "intstringlist",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "nums",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert list of string numbers into list of integers [SEP]",
        "reference": "map ( int , eval ( input ( ` Enter the unfriendly numbers : ` ) ) )",
        "Output": "[ int ( i ) for i in a ]",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] print str_0 without new ##line [SEP]",
        "reference": "sys . stdout . write ( ` . ` )",
        "Output": "print ( list ( ` melt ` ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": ".",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] round off the float that is the product of str_0 and convert it to an int [SEP]",
        "reference": "int ( round ( 2 * 100 ) )",
        "Output": "sum ( int ( x ) for x in 2 . 52 * 100 . split ( ` , ` ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "2.52 * 100",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find all files in directory str_0 with extension str_1 [SEP]",
        "reference": "os . chdir ( ` / mydir ` )",
        "Output": "results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "/mydir",
                    "quote": "\"",
                    "type": "str"
                },
                "str_1": {
                    "value": ".txt",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find all files in directory str_0 with extension str_1 [SEP]",
        "reference": "for file in os . listdir ( ` / mydir ` ) : if file . endswith ( ` . txt ` ) : pass",
        "Output": "results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "/mydir",
                    "quote": "\"",
                    "type": "str"
                },
                "str_1": {
                    "value": ".txt",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find all files in directory str_0 with extension str_1 [SEP]",
        "reference": "for root , dirs , files in os . walk ( ` / mydir ` ) : for file in files : if file . endswith ( ` . txt ` ) : pass",
        "Output": "results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "/mydir",
                    "quote": "\"",
                    "type": "str"
                },
                "str_1": {
                    "value": ".txt",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] plot data ##frame var_0 without a legend [SEP]",
        "reference": "df . plot ( legend = False )",
        "Output": "df . plot ( kind = ` bar ` , legend = 0 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] loop through the ip address range str_0 [SEP]",
        "reference": "for i in range ( 256 ) : for j in range ( 256 ) : ip = ` 192 . 168 . % d . % d ` % ( i , j ) print ( ip )",
        "Output": "print ( ` 192 . 168 . x . x ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "192.168.x.x",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] loop through the ip address range str_0 [SEP]",
        "reference": "for i , j in product ( list ( range ( 256 ) ) , list ( range ( 256 ) ) ) : pass",
        "Output": "print ( ` 192 . 168 . x . x ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "192.168.x.x",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] loop through the ip address range str_0 [SEP]",
        "reference": "generator = iter_iprange ( ` 192 . 168 . 1 . 1 ` , ` 192 . 168 . 255 . 255 ` , step = 1 )",
        "Output": "print ( ` 192 . 168 . x . x ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "192.168.x.x",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sum the corresponding decimal values for binary values of each boo ##lean element in list var_0 [SEP]",
        "reference": "sum ( 1 < < i for i , b in enumerate ( x ) if b )",
        "Output": "sum ( int ( x ) for x in x )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "x",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] write multiple strings var_0 , var_1 and var_2 in one line in a file var_3 [SEP]",
        "reference": "target . write ( ` % r \\ n % r \\ n % r \\ n ` % ( line1 , line2 , line3 ) )",
        "Output": "with open ( ` line1 ` , ` wb ` ) as f : line1 , line2 , line3 = open ( ` target ` , ` r ` ) . read ( )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "line1",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "line2",
                    "quote": "`",
                    "type": "var"
                },
                "var_2": {
                    "value": "line3",
                    "quote": "`",
                    "type": "var"
                },
                "var_3": {
                    "value": "target",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert list of lists var_0 into a flat list [SEP]",
        "reference": "[ y for x in data for y in ( x if isinstance ( x , list ) else [ x ] ) ]",
        "Output": "[ a for sublist in data for a in b for a in b ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "data",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] print new line character as str_0 in a string str_1 [SEP]",
        "reference": "print ( ` foo \\ nbar ` . encode ( ` string_escape ` ) )",
        "Output": "print ( ` foo \\ nbar ` . format ( ` \\ n ` , ` foo \\ nbar ` ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "\n",
                    "quote": "`",
                    "type": "str"
                },
                "str_1": {
                    "value": "foo\nbar",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] remove last com ##ma character str_0 in string var_0 [SEP]",
        "reference": "` ` ` ` ` ` . join ( s . rsplit ( ` , ` , 1 ) )",
        "Output": "s = s . replace ( ` , ` , ` ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": ",",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] calculate the mean of each element in array var_0 with the element previous to it [SEP]",
        "reference": "( x [ 1 : ] + x [ : - 1 ] ) / 2",
        "Output": "x . mean ( axis = 0 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "x",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get an array of the mean of each two consecutive values in nu ##mp ##y array var_0 [SEP]",
        "reference": "x [ : - 1 ] + ( x [ 1 : ] - x [ : - 1 ] ) / 2",
        "Output": "x . mean ( axis = 0 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "x",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] load data containing str_0 from file str_1 into nu ##mp ##y array var_0 [SEP]",
        "reference": "arr = numpy . fromiter ( codecs . open ( ` new . txt ` , encoding = ` utf - 8 ` ) , dtype = ` < U2 ` )",
        "Output": "arr = np . genfromtxt ( ` new . txt ` , dtype = ` utf - 8 ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "utf-8",
                    "quote": "`",
                    "type": "str"
                },
                "str_1": {
                    "value": "new.txt",
                    "quote": "`",
                    "type": "str"
                },
                "var_0": {
                    "value": "arr",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] reverse sort list of di ##cts var_0 by value for key var_1 [SEP]",
        "reference": "l = sorted ( l , key = itemgetter ( ` time ` ) , reverse = True )",
        "Output": "sorted ( l , key = lambda x : time . index ( x [ ` time ` ] ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "time",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list of dictionary var_0 based on key var_1 in descending order [SEP]",
        "reference": "l = sorted ( l , key = lambda a : a [ ` time ` ] , reverse = True )",
        "Output": "l . sort ( key = lambda x : x [ ` time ` ] , reverse = ` True ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "time",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get rows of data ##frame var_0 that match reg ##ex str_0 [SEP]",
        "reference": "df . loc [ df [ 0 ] . str . contains ( ` ( Hel | Just ) ` ) ]",
        "Output": "df [ df . drop_duplicates . map ( lambda x : ` ( Hel | Just ) ` in x ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "(Hel|Just)",
                    "quote": "'",
                    "type": "str"
                },
                "(str_0)": {
                    "value": "(Hel|Just)",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find the string in var_0 between two special characters str_0 and str_1 [SEP]",
        "reference": "re . search ( ` \\ \\ [ ( . * ) \\ \\ ] ` , your_string ) . group ( 1 )",
        "Output": "your_string . find ( ` [ ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "your_string",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "[",
                    "quote": "\"",
                    "type": "str"
                },
                "str_1": {
                    "value": "]",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find the string in var_0 between two special characters str_0 and str_1 [SEP]",
        "reference": "[ d . strftime ( ` % Y % m % d ` ) for d in pandas . date_range ( 20130226 , 20130302 ) ]",
        "Output": "your_string . find ( ` [ ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "your_string",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "[",
                    "quote": "\"",
                    "type": "str"
                },
                "str_1": {
                    "value": "]",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] count number of times string str_0 occurred in string str_1 [SEP]",
        "reference": "` ` ` The big brown fox is brown ` ` ` . count ( ` brown ` )",
        "Output": "print ( ` The big brown fox is brown ` . count ( ` brown ` ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "brown",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "The big brown fox is brown",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] deco ##de j ##son string str_0 to python di ##ct [SEP]",
        "reference": "json . loads ( request . body )",
        "Output": "json . load ( request . body )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "request.body",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] download the file from ur ##l var_0 and save it under file var_1 [SEP]",
        "reference": "urllib . request . urlretrieve ( url , file_name )",
        "Output": "with open ( ` url ` , ` r ` ) as file_name : url = file_name . read ( )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "url",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "file_name",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split string var_0 by space [SEP]",
        "reference": "text . split ( )",
        "Output": "text . split ( ` ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "text",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split string var_0 by str_0 [SEP]",
        "reference": "text . split ( ` , ` )",
        "Output": "text . split ( ` , ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "text",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": ",",
                    "quote": "\"",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split string var_0 into a list by whites ##pace [SEP]",
        "reference": "line . split ( )",
        "Output": "list ( line . split ( ` , ` ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "line",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] replace dot characters str_0 associated with as ##ci ##i letters in list var_0 with space str_1 [SEP]",
        "reference": "[ re . sub ( ` ( ? < ! \\ \\ d ) \\ \\ . ( ? ! \\ \\ d ) ` , ` ` , i ) for i in s ]",
        "Output": "print ( [ x . replace ( ` . ` , ` ` ) for x in s ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": ".",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                },
                "str_1": {
                    "value": "",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort list var_0 based on second index of each string var_1 [SEP]",
        "reference": "sorted ( list_of_strings , key = lambda s : s . split ( ` , ` ) [ 1 ] )",
        "Output": "list_of_strings . sort ( key = lambda str : s [ 1 ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "list_of_strings",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] call multiple bash function \u2018 va ##sp \u2019 and \u2018 tee tee _ output \u2019 using \u2018 | \u2019 [SEP]",
        "reference": "subprocess . check_call ( ` vasp | tee tee_output ` , shell = True )",
        "Output": "print ( ` \\ n ` . join ( [ globals ( ) . get_lines ( ) for _ in range ( n ) ] ) )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] eliminate all strings from list var_0 [SEP]",
        "reference": "[ element for element in lst if isinstance ( element , int ) ]",
        "Output": "lst = [ item for item in lst for item in lst ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "lst",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get all the elements except strings from the list str_0 . [SEP]",
        "reference": "[ element for element in lst if not isinstance ( element , str ) ]",
        "Output": "[ x for x in lst if x not in [ lst ] ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "lst",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list of di ##ction ##aries var_0 by the value of the dictionary key var_1 [SEP]",
        "reference": "newlist = sorted ( list_to_be_sorted , key = lambda k : k [ ` name ` ] )",
        "Output": "sorted ( list_to_be_sorted , key = lambda x : list ( x . values ( ) ) [ 0 ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "list_to_be_sorted",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "name",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list of di ##ction ##aries var_0 by values in key var_1 in descending order [SEP]",
        "reference": "newlist = sorted ( l , key = itemgetter ( ` name ` ) , reverse = True )",
        "Output": "sorted ( l , key = lambda x : name . index ( list ( x . values ( ) ) [ 0 ] ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "name",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list of di ##ction ##aries var_0 by values in key var_1 in descending order [SEP]",
        "reference": "list_of_dicts . sort ( key = operator . itemgetter ( ` name ` ) )",
        "Output": "sorted ( l , key = lambda x : name . index ( list ( x . values ( ) ) [ 0 ] ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "name",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list of di ##ction ##aries var_0 by values in key var_1 in descending order [SEP]",
        "reference": "list_of_dicts . sort ( key = operator . itemgetter ( ` age ` ) )",
        "Output": "sorted ( l , key = lambda x : name . index ( list ( x . values ( ) ) [ 0 ] ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "name",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list of di ##ction ##aries var_0 by values in key var_1 in descending order [SEP]",
        "reference": "df . groupby ( ` prots ` ) . sum ( ) . sort ( ` scores ` , ascending = False )",
        "Output": "sorted ( l , key = lambda x : name . index ( list ( x . values ( ) ) [ 0 ] ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "l",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "name",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] join together with str_0 elements inside a list indexed with str_1 within a dictionary var_0 [SEP]",
        "reference": "` ` ` , ` ` ` . join ( trans [ ` category ` ] )",
        "Output": "print ( list ( trans . keys ( ) ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": ",",
                    "quote": "\"",
                    "type": "str"
                },
                "str_1": {
                    "value": "category",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "trans",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] con ##cate ##nate array of strings str_0 into a string [SEP]",
        "reference": "` ` ` ` ` ` . join ( [ ` A ` , ` B ` , ` C ` , ` D ` ] )",
        "Output": "` ` ` ` ` ` . join ( [ ` [ ` A ` , ` B ` , ` C ` , ` D ` ] ` , ` a ` , ` b ` , ` c ` ] )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "['A', 'B', 'C', 'D']",
                    "quote": "`",
                    "type": "str"
                },
                "[str_0]": {
                    "value": "['A', 'B', 'C', 'D']",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get j ##son data from rest ##ful service str_0 [SEP]",
        "reference": "json . load ( urllib . request . urlopen ( ` url ` ) )",
        "Output": "print ( json . loads ( url ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "url",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] remove all strings from a list a strings var_0 where the values starts with str_0 or str_1 [SEP]",
        "reference": "[ x for x in sents if not x . startswith ( ` @ $ \\ t ` ) and not x . startswith ( ` # ` ) ]",
        "Output": "sents = [ x for x in sents if x [ 0 ] = = ` @ $ \\ t ` ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "sents",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "@$\t",
                    "quote": "`",
                    "type": "str"
                },
                "str_1": {
                    "value": "#",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] dj ##ango filter by hour [SEP]",
        "reference": "Entry . objects . filter ( pub_date__contains = ` 08 : 00 ` )",
        "Output": "now + = timedelta ( days = 7 )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] sort a list of dictionary var_0 first by key var_1 and then by var_2 [SEP]",
        "reference": "list . sort ( key = lambda item : ( item [ ` points ` ] , item [ ` time ` ] ) )",
        "Output": "sorted ( list , key = lambda x : ( x [ ` points ` ] , x [ ` time ` ] ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "list",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "points",
                    "quote": "`",
                    "type": "var"
                },
                "var_2": {
                    "value": "time",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert date ##time object str_0 to seconds [SEP]",
        "reference": "( t - datetime . datetime ( 1970 , 1 , 1 ) ) . total_seconds ( )",
        "Output": "datetime . datetime . now ( ) . seconds ( ` ( 1970 , 1 , 1 ) ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "(1970, 1, 1)",
                    "quote": "`",
                    "type": "str"
                },
                "(str_0)": {
                    "value": "(1970, 1, 1)",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] insert var_0 before the file extension in str_0 or replace var_1 with var_2 if it pre ##cede ##s the extension . [SEP]",
        "reference": "re . sub ( ` ( \\ \\ _a ) ? \\ \\ . ( [ ^ \\ \\ . ] * ) $ ` , ` _suff . \\ \\ 2 ` , ` long . file . name . jpg ` )",
        "Output": "_suff = open ( _suff , ` suff ` ) . read ( ) . split ( ` long . file . name . jpg ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "_suff",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "long.file.name.jpg",
                    "quote": "`",
                    "type": "str"
                },
                "var_1": {
                    "value": "_a",
                    "quote": "`",
                    "type": "var"
                },
                "var_2": {
                    "value": "suff",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] re ##load a module var_0 [SEP]",
        "reference": "import imp",
        "Output": "import imp",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "module",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert integer var_0 into an una ##ssi ##gned integer [SEP]",
        "reference": "struct . unpack ( ` H ` , struct . pack ( ` h ` , number ) )",
        "Output": "int ( round ( number ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "number",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert int values in list var_0 to float [SEP]",
        "reference": "numlist = [ float ( x ) for x in numlist ]",
        "Output": "numlist = [ float ( i ) for i in numlist ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "numlist",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] write data ##frame var_0 , excluding index , to a cs ##v file [SEP]",
        "reference": "df . to_csv ( filename , index = False )",
        "Output": "df = csv . writer ( f , delimiter = ` , ` , quotechar = ` , ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "df",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert a ur ##lli ##b un ##qu ##oted string var_0 to a j ##son data var_1 [SEP]",
        "reference": "json_data = json . loads ( unescaped )",
        "Output": "json_data = json . dumps ( urllib . request . unescaped ( json_data ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "unescaped",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "json_data",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create a list containing all as ##ci ##i characters as its elements [SEP]",
        "reference": "[ chr ( i ) for i in range ( 127 ) ]",
        "Output": "[ ord ( c ) for c in l ]",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] write var_0 to a binary file var_1 [SEP]",
        "reference": "new File . write ( struct . pack ( ` 5B ` , * new File Bytes ) )",
        "Output": "with open ( ` new File ` , ` wb ` ) as f : f . write ( new File )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "newFileBytes",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "newFile",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] python reg ##ex - check for a capital letter with a following lower ##case in string var_0 [SEP]",
        "reference": "re . sub ( ` ^ [ A - Z0 - 9 ] * ( ? ! [ a - z ] ) ` , ` ` , string )",
        "Output": "re . findall ( ` select_form ` , string )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "string",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the last key of dictionary var_0 [SEP]",
        "reference": "list ( dict . keys ( ) ) [ - 1 ]",
        "Output": "dict [ - 1 ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "dict",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] write line str_0 to file var_0 [SEP]",
        "reference": "print ( ` hi there ` , file = f )",
        "Output": "with open ( ` hi there ` , ` wb ` ) as f : f . write ( ` hi there ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "hi there",
                    "quote": "\"",
                    "type": "str"
                },
                "var_0": {
                    "value": "f",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] write line str_0 to file var_0 [SEP]",
        "reference": "f = open ( ` myfile ` , ` w ` )",
        "Output": "with open ( ` hi there ` , ` wb ` ) as f : myfile . write ( ` hi there ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "hi there",
                    "quote": "\"",
                    "type": "str"
                },
                "var_0": {
                    "value": "myfile",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] write line str_0 to file str_1 [SEP]",
        "reference": "with open ( ` somefile . txt ` , ` a ` ) as the_file : the_file . write ( ` Hello \\ n ` )",
        "Output": "with open ( ` somefile . txt ` , ` a ` ) as f : f . write ( ` Hello ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "Hello",
                    "quote": "\"",
                    "type": "str"
                },
                "str_1": {
                    "value": "somefile.txt",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] convert unicode string var_0 to as ##ci ##i [SEP]",
        "reference": "s . encode ( ` iso - 8859 - 15 ` )",
        "Output": "s . encode ( ` ascii ` , ` ignore ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] dj ##ango get maximum value associated with field str_0 in model var_0 [SEP]",
        "reference": "Authorized Email . objects . filter ( group = group ) . order_by ( ` - added ` ) [ 0 ]",
        "Output": "Authorized Email . _meta . as_view ( ) . order_by ( ` added ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "added",
                    "quote": "'",
                    "type": "str"
                },
                "var_0": {
                    "value": "AuthorizedEmail",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] find all numbers and dots from a string var_0 using reg ##ex [SEP]",
        "reference": "re . findall ( ` Test ( [ 0 - 9 . ] * [ 0 - 9 ] + ) ` , text )",
        "Output": "re . findall ( ` dots ` , ` text ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "text",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] python reg ##ex to find all numbers and dots from str_0 [SEP]",
        "reference": "re . findall ( ` Test ( [ \\ \\ d . ] * \\ \\ d + ) ` , text )",
        "Output": "print ( re . findall ( ` \\ \\ d + ` , s ) )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "text",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] execute script str_0 using str_1 shell [SEP]",
        "reference": "os . system ( ` powershell . exe ` , ` script . ps1 ` )",
        "Output": "os . system ( ` script . ps1 ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "script.ps1",
                    "quote": "'",
                    "type": "str"
                },
                "str_1": {
                    "value": "powershell.exe",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sort a list of tu ##ples var_0 by third item in the tu ##ple [SEP]",
        "reference": "b . sort ( key = lambda x : x [ 1 ] [ 2 ] )",
        "Output": "b . sort ( key = lambda x : x [ 1 ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "b",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get a list of all keys in cassandra database var_0 with p ##y ##cas ##sa [SEP]",
        "reference": "list ( cf . get_range ( ) . get_keys ( ) )",
        "Output": "cf . setdefault ( k , [ ] )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "cf",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] create a date ##time with the current date & time [SEP]",
        "reference": "datetime . datetime . now ( )",
        "Output": "datetime . datetime . now ( )",
        "Var_Maps": [
            {}
        ]
    },
    {
        "intent": "[CLS] get the index of an integer str_0 from a list var_0 if the list also contains boo ##lean items [SEP]",
        "reference": "next ( i for i , x in enumerate ( lst ) if not isinstance ( x , bool ) and x = = 1 )",
        "Output": "[ i for i , j in enumerate ( lst ) if j = = 7 ]",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "1",
                    "quote": "`",
                    "type": "str"
                },
                "var_0": {
                    "value": "lst",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sub ##tra ##ct 13 from every number in a list var_0 [SEP]",
        "reference": "a [ : ] = [ ( x - 13 ) for x in a ]",
        "Output": "[ ( x - x1 ) for x in a ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] choose a random file from the directory contents of the c drive , str_0 [SEP]",
        "reference": "random . choice ( os . listdir ( ` C : \\ \\ ` ) )",
        "Output": "random . choice ( os . listdir , ` C : \\ \\ ` )",
        "Var_Maps": [
            {
                "str_0": {
                    "value": "C:\\",
                    "quote": "`",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get the highest element in absolute value in a nu ##mp ##y matrix var_0 [SEP]",
        "reference": "max ( x . min ( ) , x . max ( ) , key = abs )",
        "Output": "np . where ( x = = np . max ( x ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "x",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] get all ur ##ls within text var_0 [SEP]",
        "reference": "re . findall ( ` ( http . * ? ) ` , s , re . MULTILINE | re . DOTALL )",
        "Output": "print ( ` ` . join ( s . split ( ` \\ n ` ) ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "s",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] match ur ##ls whose domain doesn ' t start with var_0 from string var_1 using reg ##ex [SEP]",
        "reference": "re . findall ( ` http : / / [ ^ t ] [ ^ s ` ] + \\ \\ . html ` , document )",
        "Output": "urllib . request . urlopen ( ` document ` ) . read ( ) . decode ( ` utf - 8 ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "t",
                    "quote": "`",
                    "type": "var"
                },
                "var_1": {
                    "value": "document",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] split a string var_0 considering the spaces str_0 [SEP]",
        "reference": "mystring . replace ( ` ` , ` ! ! ` ) . split ( ` ! ` )",
        "Output": "[ i . split ( ` : ` ) for i in mystring . split ( ` ` ) ]",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "mystring",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] open file var_0 with mode str_0 [SEP]",
        "reference": "open ( path , ` r ` )",
        "Output": "os . listdir ( ` r ` )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "path",
                    "quote": "`",
                    "type": "var"
                },
                "str_0": {
                    "value": "r",
                    "quote": "'",
                    "type": "str"
                }
            }
        ]
    },
    {
        "intent": "[CLS] sum elements at the same index in list var_0 [SEP]",
        "reference": "[ [ sum ( item ) for item in zip ( * items ) ] for items in zip ( * data ) ]",
        "Output": "map ( sum , zip ( * data ) )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "data",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    },
    {
        "intent": "[CLS] add a new axis to array var_0 [SEP]",
        "reference": "a [ : , ( np . newaxis ) ]",
        "Output": "a = np . concatenate ( ( a [ 0 ] , a [ 1 ] ) , axis = 1 )",
        "Var_Maps": [
            {
                "var_0": {
                    "value": "a",
                    "quote": "`",
                    "type": "var"
                }
            }
        ]
    }
]